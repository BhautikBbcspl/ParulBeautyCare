@model ParulBeautyCareViewModel.ViewModel.BookAppointmentViewModel
@{
    ViewBag.Title = "EditBookAppointment";
    ViewBag.Module = "BookingManagement";
}
<style>
    .field-icon {
        float: right;
        margin-top: -30px;
        position: relative;
        right: 15px;
        z-index: 2;
    }
</style>
<div class="content-wrapper" style="height:auto !important;">
    <div class="row">
        <div class="col-12 grid-margin">
            <div class="card">
                <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                    <div class="bg-gradient-pinkHeader shadow-primary border-radius-lg pt-4 d-flex justify-content-between">
                        <h2 class="text-white text-capitalize ps-3 title_margin"><b>Book Appointment</b></h2>
                    </div>
                </div>
                @using (Html.BeginForm("AddBookAppointment", "BookingManagement", FormMethod.Post, new { @class = "forms-sample", autocomplete = "off" }))
                {
                    <div class="card-body">
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(x => x.Action)
                        @Html.HiddenFor(x => x.BookingId, new { @id = "txtBookingId" })
                        <div class="row form-group">
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Select Company
                                    @Html.ValidationMessageFor(m => m.DepartmentId, "", new { @class = "text-danger h3" })
                                </label>
                                @Html.DropDownListFor(m => m.DepartmentId, new SelectList(Model.DeptList, "DepartmentId", "DepartmentName"), "Select Company",
                                    new Dictionary<string, object>() {
                                               {"id","ddlDeptId"},
                                               {"disabled","disabled" },
                                               { "class","form-control form-select js-example-basic-single w-100"}
                                        })
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Customer Name
                                    @Html.ValidationMessageFor(m => m.CustomerName, "", new { @class = "text-danger h3" })
                                </label>
                                @Html.TextBoxFor(m => m.CustomerName, new Dictionary<string, object>() {
                                                                            {"id","txtCustomerName"},
                                                                            {"class","form-control"},
                                                                            {"autocomplete","off"},
                                                                            {"required","required"},
                                                                            {"disabled","disabled" },
                                                                            {"placeholder","Enter Customer Name"}
                                                                            })
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Contact No
                                    @Html.ValidationMessageFor(m => m.ContactNo, "", new { @class = "text-danger h3" })
                                </label>
                                @Html.TextBoxFor(m => m.ContactNo, new Dictionary<string, object>() {
                                                                            {"id","txtContactNo"},
                                                                            {"class","form-control"},
                                                                            {"autocomplete","off"},
                                                                            {"disabled","disabled" },
                                                                            {"required","required"},
                                                                            {"placeholder","Enter Contact No"}
                                                                            })
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Address
                                    @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger h3" })
                                </label>
                                @Html.TextBoxFor(m => m.Address, new Dictionary<string, object>() {
                                                                            {"id","txtAddress"},
                                                                            {"class","form-control"},
                                                                            {"autocomplete","off"},
                                                                            {"required","required"},
                                                                            {"placeholder","Enter Address"}
                                                                            })
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Function/Service Date
                                    @Html.ValidationMessageFor(m => m.FunctionDate, "", new { @class = "text-danger h3" })
                                </label>
                                <div class="input-group">
                                    @Html.TextBoxFor(m => m.FunctionDate, new Dictionary<string, object>() {
                                                                                {"id","txtFunctionDate"},
                                                                                {"class","form-control"},
                                                                                {"required","required"},
                                                                                {"placeholder","Select Function Date"}
                                                                                })
                                    <div class="input-group-append d-flex">
                                        <span class="input-group-text" id="datepickerIcon" style="color: #212529 !important; border: 1px solid #ced4da !important; ">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Function/Service Time
                                    @Html.ValidationMessageFor(m => m.ReadyTime, "", new { @class = "text-danger h3" })
                                </label>
                                <div class="input-group">
                                    @Html.TextBoxFor(m => m.ReadyTime, new Dictionary<string, object>() {
                                                                                {"id","txtReadyTime"},
                                                                                {"class","form-control timepicker"},
                                                                                {"autocomplete","off"},
                                                                                {"required","required"},
                                                                                {"placeholder", "Select Time"},
                                                                                {"pattern", "([01]?[0-9]|2[0-3]):[0-5][0-9]"}
                               })
                                    <div class="input-group-append d-flex">
                                        <span class="input-group-text timepicker-icon d-flex align-items-center" id="timepickerIcon" style="color: #212529 !important; border: 1px solid #ced4da !important; ">
                                            <i class="fa fa-clock"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                           
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Total Amount
                                </label>
                                @Html.TextBoxFor(m => m.BookingAmount, new Dictionary<string, object>() {
                                                                            {"id","txtTotal"},
                                                                            {"class","form-control"},
                                                                            {"autocomplete","off"},
                                                                            {"readonly","readonly" }
                                                                            })
                            </div>

                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">Service Type @Html.ValidationMessageFor(m => m.AppointmentType, "", new { @class = "text-danger h3" })</label>
                                @Html.DropDownListFor(x => x.AppointmentType, new List<SelectListItem>
                                       {
                                           new SelectListItem{ Text="Select Appointment Type", Value = "",Selected=true  },
                                           new SelectListItem{ Text="Package", Value = "1"},
                                           new SelectListItem{ Text="Individual", Value = "2" }
                                        }, new { @class = "form-control form-select js-example-basic-single", @id = "AppointmentType", @disabled = "disabled", @onchange = "SetAppointmentType()" })
                            </div>
                        </div>
                    </div>
                    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-lg mt-0">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="exampleModalLabel">Appointment </h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>

                                <div class="modal-body" id="modalContent" style="padding:0px 26px !important">
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                   
                    <br />
                    <fieldset id="individualFieldset1" class="ml-2 mr-2 m-1 table-responsive" overflow: scroll">
                        <table id="PackageTable" class="table table-bordered ">
                            <thead>
                                <tr>
                                    <td>Select CateGory</td>
                                    <td>Select Services</td>
                                    <td>No of Sitting</td>
                                    <td>Interval's(Days)</td>
                                    <td>Remark</td>
                                    <td style="min-width:130px;max-width:150px !important">Action</td>
                                </tr>
                            </thead>
                            <tbody id="PackageBody">
                               
                            </tbody>

                        </table>
                       
                    </fieldset>
                    <div class="panel-footer row justify-content-md-center justify-content-sm-center justify-content-lg-center">
                        <CENTER class="col-lg-1 col-md-1 col-sm-1">
                            <input id="btnSubmit" type="submit" class="btn btn-primary pull-right mt-2 mr-5 mb-1" value="Book Appointment" onclick="StoreAllValues(event);" />
                        </CENTER>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<script>
    $("#datepickerIcon").click(function () {
        $("#txtFunctionDate").click();
    });
    $("#timepickerIcon").click(function () {
        $("#txtReadyTime").focus();
    });

        var rowCount = $('.data-contact-person2').length;
        $(document).on("click", ".classAdd2", function () {
            CategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.CategoryList))');
            SubCategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.SubCategoryList))');
            var CategoryOptions = '';
            var SubCategoryOptions = '';
                    CategoryOptions += '<option value="">Select Category</option>';
                    for (var i = 0; i < CategoryList.length; i++) {
                        CategoryOptions += '<option value="' + CategoryList[i].CategoryId + '">' +
                            CategoryList[i].CategoryName +
                    '</option>';
            }
            SubCategoryOptions += '<option value="">Select SubCategory</option>';
                    for (var i = 0; i < SubCategoryList.length; i++) {
                        SubCategoryOptions += '<option value="' + SubCategoryList[i].SubCategoryId + '">' +
                            SubCategoryList[i].SubCategoryName +
                    '</option>';
            }
                    var contactdiv = '<tr class="data-contact-person newRow' + rowCount + '">' +
                        '<td>' +
                        '<select name="CategoryId" id="CategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategory(this.value,' + rowCount + ')" class="form-control form-select js-example-basic-single w-100" style="width: 200px; !important" required>' +
                        CategoryOptions +
                        '</select></td>' +
                        '<td>' +
                        '<select name="SubCategoryId" id="SubCategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategoryId(this.value,' + rowCount + ')" class="form-control form-select js-example-basic-single w-100" style="width: 250px; !important" required>' +
                        SubCategoryOptions +
                        '</select></td>' + '<td> <input type="text" name="NoOfSitting" id="NoOfSitting' + rowCount + '" class="form-control" readonly = "readonly" required/> </td> ' + '<td> <input type="text" name="DayInterval" id="DayInterval' + rowCount + '" class="form-control" readonly = "readonly" required/></td> ' + '<td> <input type="text" name="Remark" id="Remark' + rowCount + '" class="form-control"/><input type="text" name="Price" id="Price' + rowCount + '" class="form-control total1" readonly="readonly" hidden required/><input type="text" name="IntePackageServiceId" id="IntePackageServiceId' + rowCount + '" class="form-control" readonly="readonly" hidden required/> </td>' +
                        '<td>' +
                        '<button type="button" class="btn btn-sm btn-primary classAdd2 mx-1"> <i class="fa fa-plus-square" aria-hidden="true"></i> </button>' +
                        '<button type="button" class="btn btn-sm btn-danger deleteContact2"><i class="fa fa-trash" aria-hidden="true"></i></button>' +
                        '</td>' +
                        '</tr>';

                    $('#PackageBody').append(contactdiv);
                    $('.js-example-basic-single').select2();

            $(document).on("click", ".deleteContact2", function () {
                var $row = $(this).closest("tr");
                var rowJson = getRowJson(this);
                if (!rowJson) {
                    $row.remove();
                    var count = $("table").find("tr").length;
                    if (count > 0) {
                        calculateTotal();
                    }
                    else {
                        amountFromViewBag = 0;
                        $('#txtTotal').val(0);
                    }
                }
                    return;
            });
            rowCount++;

        });
        function GetRowSubCategoryId(_SubCategoryId, _RowCount)
    {
            if (_SubCategoryId === "")
            {
                var rowcount1 = _RowCount;
                var RowNew = '.newRow' + rowcount1;
                $(RowNew).each(function () {
                    var $row = $(this).closest("tr");
                    if (_SubCategoryId === "") {
                        $row.find("input[name='Price']").val(0);
                        $row.find("input[name='NoOfSitting']").val('');
                        $row.find("input[name='DayInterval']").val('');
                        calculateTotal();
                    }
                });
            return;
        }

        var url = "@System.Configuration.ConfigurationManager.AppSettings["notifyKey"]" + "/BookingManagement/SelectSubCategoryDetails";
        $.ajax({
            url: url,
            data: { Subcateid: _SubCategoryId },
            cache: false,
            type: "POST",
            dataType: "json",
            traditional: true,
            success: function (data)
            {
                var rowcount1 = _RowCount;
                var RowNew = '.newRow' + rowcount1;

                $(RowNew).each(function ()
                {
                    var $row = $(this).closest("tr");
                    for (var i = 0; i < data.SubCateGory.length; i++)
                    {
                        var selectedPrice = data.SubCateGory[i].Amount;
                        var selectedSubcategory = data.SubCateGory[i].SubCategoryName;
                        var NoOfSitting = data.SubCateGory[i].NoOfSitting;
                        var Intervals = data.SubCateGory[i].DayInterval;
                        $row.find("input[name='Price']").val(selectedPrice);
                        $row.find("input[name='NoOfSitting']").val(NoOfSitting);
                        $row.find("input[name='DayInterval']").val(Intervals);
                        $row.find("input[name='IntePackageServiceId']").val(0);
                        $row.find("select[name='SubCategoryId'] option:selected").text(selectedSubcategory);
                        calculateTotal();
                    }
                });
            },
            error: function (reponse)
            {
                var rowcount1 = _RowCount;
                var $row = $(this).closest("tr");
                $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="">Service Not Found</option>');
            },
        });
    }
        function GetRowSubCategory(_Category,_RowCount) {
        if (_Category === "") {
            var rowcount1 = _RowCount;
            var RowNew = '.newRow' + rowcount1;

            $(RowNew).each(function () {
                var $row = $(this).closest("tr");
                if (_Category === "") {
                    $row.find("input[name='Price']").val(0);
                    $row.find("input[name='NoOfSitting']").val('');
                    $row.find("input[name='DayInterval']").val('');
                    var ddlSubCategory = $("#SubCategoryDropdown" + rowcount1);
                    ddlSubCategory.empty();
                    ddlSubCategory.append('<option value="">Service Not Found</option>');
                    calculateTotal();
                }
            });
            return;
        }
            var url = "@System.Configuration.ConfigurationManager.AppSettings["myKey"]" + "/BookingManagement/SelectSubCategoryJson";

            $.ajax({
                url: url,
                data: { ddlCategoryDropdown: _Category  } ,
                cache: false,
                type: "POST",
                datatype: "json",
                traditional: true,

                success: function (data) {
                    var rowcount1 = _RowCount;
                    var RowNew = '.newRow' + rowcount1;
                    $(RowNew).each(function () {
                        var $row = $(this).closest('tr');
                        $row.find("#SubCategoryDropdown" + rowcount1).empty();
                        $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="">Select Services</option>');
                        for (var i = 0; i < data.SubCateGory.length; i++) {
                            $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="' + data.SubCateGory[i].SubCategoryId + '">' + data.SubCateGory[i].SubCategoryName +
                                '</option>');
                        }
                        $row.find("input[name='Price']").val(0);
                        $row.find("input[name='NoOfSitting']").val('');
                        $row.find("input[name='DayInterval']").val('');
                        calculateTotal();
                    });
                },
                error: function (reponse) {
                    var $row = $(this).closest('tr');
                    $row.find("#SubCategoryDropdown" + rowcount1).empty();
                    $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="">Service Not Found</option>');
                }
            });

    }
        function SweetAlert(Message, Type) {
        if (Type == 'error') {
            Swal.fire({
                position: 'top-end',
                icon: 'error',
                title: Message,
                showConfirmButton: false,
                timer: 3000
            })
        }
    }
        $("#txtFunctionDate").change(function () {
        var selectedDate = $("#txtFunctionDate").val();
        BookingCalendar(selectedDate);
    });
         function BookingCalendar(selectedDate) {
             var url = "@Url.Action("AppointmentChecking", "BookingManagement")";
             url += "?selectedDate=" + encodeURIComponent(selectedDate);

            $.get(url, function (data) {
                $('#modalContent').html(data);
             });
             $("#exampleModal").modal("show");
    }
    function getRowJson(button) {
        var $row = $(button).closest("tr");

        var rowData = {};

        $row.find("input, select").each(function () {
            var $element = $(this);
            var name = $element.attr("name");
            var value = $element.val();

            if (name) {
                rowData[name] = value;
            }
        });

        for (var key in rowData) {
            if (!rowData[key]) {
                $row.remove();
                return null;
            }
        }

        return rowData;
    }
    $(document).ready(function () {
        $("#txtFunctionDate").flatpickr({
            dateFormat: "d-m-Y",
            minDate: "today"
        });

        var BookAppId = $("#txtBookingId").val();
        if (BookAppId != null && BookAppId != 0) {
            document.getElementById("txtCustomerName").readOnly = true;
            document.getElementById("txtContactNo").readOnly = true;
            document.getElementById("ddlDeptId").disabled = true;
            document.getElementById("AppointmentType").disabled = true;

            if (BookAppId == "") { BookAppId = 0; }
            if (BookAppId != 0) {
                var url = "@System.Configuration.ConfigurationManager.AppSettings["notifyKey"]" + "/BookingManagement/GetBookedAppointmentDetails";
                $.ajax({
                    url: url,
                    data: { BookAppId: BookAppId },
                    cache: false,
                    type: "POST",
                    datatype: "json",
                    traditional: true,
                    success:
                        function (data) {
                            var tableBody = $('#PackageBody');
                            tableBody.empty();
                            if (data.length === 0) {
                                addEmptyRow();
                            }
                            else {
                                $.each(data.sittingList, function (index, item) {
                                    //var contactdiv = '<tr class="data-contact-person2 newRow' + rowCount + '">' +
                                    //    '<td><input type="text" name="CategoryName" class="form-control" value="' + item.CategoryName + '" readonly="readonly" autocomplete="off" /><input type="text" name="CategoryId" id="CategoryDropdown" class="form-control text-center" value="' + item.CategoryId + '" hidden/> </td> ' +
                                    //    '<td><input type="text" name="SubCategoryName" class="form-control" value="' + item.SubCategoryName + '" readonly="readonly" autocomplete="off" /><input type="text" name="SubCategoryId" id="SubCategoryDropdown" class="form-control text-center" value="' + item.SubCategoryId + '" hidden/> </td> ' +
                                    //    '<td>' + '<input type="text" name="NoOfSitting" id="NoOfSitting" value="' + item.NoOfSitting + '" class="form-control" readonly = "readonly" />' + '</td>' + '<td>' + '<input type="text" name="DayInterval" id="DayInterval" value="' + item.DayInterval + '" class="form-control" readonly = "readonly" required/>' + '</td>' + '<td>' + '<input type="text" name="Remark" id="Remark" value="' + item.Remark + '" class="form-control"  /><input type="text" name="IntePackageServiceId" id="IntePackageServiceId" value="' + item.IntePackageServiceId + '" class="form-control" readonly hidden/><input type="text" name="bookserviceid" id="bookserviceid" value="' + item.BookServiceID + '" class="form-control" readonly hidden/><input type="text" name="DeleteStatus" id="DeleteStatus" value="' + item.DeleteStatus + '" class="form-control" readonly hidden/><input type = "text" name = "Price" id = "Price" value = "' + item.Amount + '" class="form-control total" readonly hidden/>' + '</td>' +
                                    //    '<td>' + '<button type="button" class="btn btn-sm btn-primary classAdd2 mx-1"><i class="fa fa-plus-square" aria-hidden="true"></i></button>';
                                    //if (item.IntePackageServiceId == 0 && item.DeleteStatus == "Yes") {
                                    //    contactdiv +=
                                    //        '<button type="button" class="btn btn-sm btn-danger deleteContact"><i class="fa fa-trash" aria-hidden="true"></i></button>'
                                    //}
                                    //contactdiv += '</td>' +
                                    //    '</tr>';

                                    //$('#PackageBody').append(contactdiv);
                                    var contactdiv = '<tr class="data-contact-person2 newRow' + rowCount + '">' +
                                        '<td>' +
                                        '<input type="text" name="CategoryName" class="form-control" value="' + item.CategoryName + '" readonly="readonly" autocomplete="off" />' +
                                        '<input type="text" name="CategoryId" class="form-control text-center" value="' + item.CategoryId + '" hidden />' +
                                        '</td>' +
                                        '<td>' +
                                        '<input type="text" name="SubCategoryName" class="form-control" value="' + item.SubCategoryName + '" readonly="readonly" autocomplete="off" />' +
                                        '<input type="text" name="SubCategoryId" class="form-control text-center" value="' + item.SubCategoryId + '" hidden />' +
                                        '</td>' +
                                        '<td>' +
                                        '<input type="text" name="NoOfSitting" class="form-control" value="' + item.NoOfSitting + '" readonly="readonly" />' +
                                        '</td>' +
                                        '<td>' +
                                        '<input type="text" name="DayInterval" class="form-control" value="' + item.DayInterval + '" readonly="readonly" required />' +
                                        '</td>' +
                                        '<td>' +
                                        '<input type="text" name="Remark" class="form-control" value="' + item.Remark + '" />' +
                                        '<input type="text" name="IntePackageServiceId" class="form-control" value="' + item.IntePackageServiceId + '" hidden />' +
                                        '<input type="text" name="bookserviceid" class="form-control" value="' + item.BookServiceID + '" hidden />' +
                                        '<input type="text" name="DeleteStatus" class="form-control" value="' + item.DeleteStatus + '" hidden />' +
                                        '<input type="text" name="Price" class="form-control total" value="' + item.Amount + '" readonly="readonly" hidden />' +
                                        '</td>' +
                                        '<td>' +
                                        '<button type="button" class="btn btn-sm btn-primary classAdd2 mx-1"><i class="fa fa-plus-square" aria-hidden="true"></i></button>';
                                    if (item.IntePackageServiceId == 0 && item.DeleteStatus == "Yes") {
                                        contactdiv +=
                                            '<button type="button" class="btn btn-sm btn-danger deleteContact"><i class="fa fa-trash" aria-hidden="true"></i></button>';
                                    }
                                    contactdiv += '</td>' +
                                        '</tr>';
                                    $('#PackageBody').append(contactdiv);

                                    individualFieldset1.style.display = "block";
                                    $('.js-example-basic-single').select2();
                                    $(document).off("click", ".deleteContact").on("click", ".deleteContact", function () {
                                        debugger
                                        var $row = $(this).closest("tr");
                                        var bookserviceid = $row.find("input[name='bookserviceid']").val();
                                        var SubCategoryId = $row.find("input[name='SubCategoryId']").val();
                                       if ((bookserviceid && bookserviceid !== "0") && (SubCategoryId && SubCategoryId !== "0")) {
                                           var count = $("#PackageBody tr").length;
                                           $(this).off("click");
                                            if (count > 0) {
                                                $.ajax({
                                                    url: "@System.Configuration.ConfigurationManager.AppSettings["notifyKey"]" + "/BookingManagement/DeleteBookedService",
                                                    type: 'POST',
                                                    data: { id: bookserviceid, id1: SubCategoryId },
                                                    success: function (data) {
                                                        debugger
                                                        $row.remove();
                                                        amountFromViewBag = parseFloat(data);
                                                        calculateTotal();
                                                    },
                                                    error: function (xhr, status, error) {
                                                        console.error(error);
                                                    }
                                                });
                                            } else {
                                                amountFromViewBag = 0;
                                                $('#txtTotal').val(0);
                                            }
                                        }
                                            return false;
                                    });
                                    rowCount++;
                                });
                            }
                            amountFromViewBag = parseFloat('@ViewBag.amount').toFixed(0);
                            $('#txtTotal').val(amountFromViewBag);
                            individualFieldset1.style.display = "block";

                        },
                    error: function (reponse) {
                        var page = "Select Service"; $('#Price').html(page);
                        individualFieldset1.style.display = "none";
                        $('#txtTotal').val(0);
                    }
                });
            }
        }
        else {
            var page = "Select Service"; $('#Price').html(page);
            individualFieldset1.style.display = "none";
            $('#txtTotal').val(0);

        }
    });
    function calculateTotal() {
        debugger
        console.log(amountFromViewBag);
        var total = parseFloat(amountFromViewBag);
        if (!isNaN(total)) {
            var count = $("#PackageBody tr:has(.total1)").length;
            if (count > 0) {
                $('#PackageBody').find('.total1').each(function () {
                    debugger
                    var price = parseFloat($(this).val());
                    if (!isNaN(price)) {
                        total += price;
                    }
                });
            }
        }
        else {
            total = 0;
        }
        $('#txtTotal').val(total.toFixed(0));


    }

</script>