@model ParulBeautyCareViewModel.ViewModel.BookAppointmentViewModel
@{
    ViewBag.Title = "Book Appointment";
    ViewBag.Module = "Booking Management";
}
<style>
    .field-icon {
        float: right;
        margin-top: -30px;
        position: relative;
        right: 15px;
        z-index: 2;
    }
    /* .select2 {
        width: 100% !important;
    }*/
</style>
<div class="content-wrapper">
    <div class="row">
        <div class="col-12 grid-margin">
            <div class="card">
                <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                    <div class="bg-gradient-pinkHeader shadow-primary border-radius-lg pt-4 d-flex justify-content-between">
                        <h2 class="text-white text-capitalize ps-3 title_margin"><b>Book Appointment</b></h2>
                    </div>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("BookAppointment", "BookingManagement", FormMethod.Post, new { @class = "forms-sample" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(x => x.Action)
                        @Html.Hidden("BookAppointment", null, new { id = "BookAppointmentInput", @class = "BookAppointmentInput" })
                        <div class="row form-group">
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Customer Name
                                    @Html.ValidationMessageFor(m => m.CustomerName, "", new { @class = "text-danger h3" })
                                </label>
                                @Html.TextBoxFor(m => m.CustomerName, new Dictionary<string, object>() {
                                                                            {"id","txtCustomerName"},
                                                                            {"class","form-control"},
                                                                            {"autocomplete","off"},
                                                                            {"required","required"},
                                                                            {"placeholder","Enter Customer Name"}
                                                                            })
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Contact No
                                    @Html.ValidationMessageFor(m => m.ContactNo, "", new { @class = "text-danger h3" })
                                </label>
                                @Html.TextBoxFor(m => m.ContactNo, new Dictionary<string, object>() {
                                                                            {"id","txtContactNo"},
                                                                            {"class","form-control"},
                                                                            {"autocomplete","off"},
                                                                            {"required","required"},
                                                                            {"placeholder","Enter Contact No"}
                                                                            })
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Address
                                    @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger h3" })
                                </label>
                                @Html.TextBoxFor(m => m.Address, new Dictionary<string, object>() {
                                                                            {"id","txtAddress"},
                                                                            {"class","form-control"},
                                                                            {"autocomplete","off"},
                                                                            {"required","required"},
                                                                            {"placeholder","Enter Address"}
                                                                            })
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Deposit Amount
                                    @Html.ValidationMessageFor(m => m.DepositAmount, "", new { @class = "text-danger h3" })
                                </label>
                                @Html.TextBoxFor(m => m.DepositAmount, new Dictionary<string, object>() {
                                                                            {"id","txtDepositAmount"},
                                                                            {"class","form-control"},
                                                                            {"autocomplete","off"},
                                                                            {"required","required"},
                                                                            {"placeholder","Enter Deposit Amount"}
                                                                            })
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Total Amount
                                    @Html.ValidationMessageFor(m => m.BookingAmount, "", new { @class = "text-danger h3" })
                                </label>
                                @Html.TextBoxFor(m => m.BookingAmount, new Dictionary<string, object>() {
                                                                            {"id","txtTotal"},
                                                                            {"class","form-control"},
                                                                            {"autocomplete","off"},
                                                                            {"required","required"},
                                                                            {"readonly","readonly" }
                                                                            })
                            </div>

                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">  
                                    Function Date
                                    @Html.ValidationMessageFor(m => m.FunctionDate, "", new { @class = "text-danger h3" })
                                </label>
                                <div class="input-group date">
                                    @Html.TextBoxFor(m => m.FunctionDate, new Dictionary<string, object>() {
                                                                                {"id","txtFunctionDate"},
                                                                                {"class","form-control dateflat"},
                                                                                {"autocomplete","off"},
                                                                                {"required","required"},
                                                                                {"placeholder","Select Function Date"}
                                                                                })
                                    <div class="input-group-append d-flex">
                                        <!-- Use d-flex class for flexbox behavior -->
                                        <span class="input-group-text" id="datepickerIcon" style="color: #212529 !important; border: 1px solid #ced4da !important; ">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">
                                    Function Time
                                    @Html.ValidationMessageFor(m => m.ReadyTime, "", new { @class = "text-danger h3" })
                                </label>
                                <div class="input-group">
                                    @Html.TextBoxFor(m => m.ReadyTime, new Dictionary<string, object>() {
                                                                                {"id","txtReadyTime"},
                                                                                {"class","form-control timepicker"},
                                                                                {"autocomplete","off"},
                                                                                {"required","required"},
                                                                                {"placeholder", "Select Time"},
                                                                                {"pattern", "([01]?[0-9]|2[0-3]):[0-5][0-9]"}, // Regular expression for 24-hour time format
                                                                                {"title", "Please enter a time in the format HH:mm"}
                               })
                                    <div class="input-group-append d-flex">
                                        <span class="input-group-text timepicker-icon d-flex align-items-center" id="timepickerIcon" style="color: #212529 !important; border: 1px solid #ced4da !important; ">
                                            <i class="fa fa-clock"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3">
                                <label class="col-form-label">Service Type</label>
                                @Html.DropDownListFor(x => x.AppointmentType, new List<SelectListItem>
                                       {
                                           new SelectListItem{ Text="Select Appointment Type", Value = "",Selected=true  },
                                           new SelectListItem{ Text="Package", Value = "1"},
                                           new SelectListItem{ Text="Individual", Value = "2" }
                                        }, new { @class = "form-control form-select js-example-basic-single", @id = "AppointmentType", @onchange = "SetAppointmentType()" })
                            </div>
                            <div class="col-sm-12 col-md-4 col-lg-3" id="packageDropdownContainer" style="display: none;">
                                <label class="col-form-label">
                                    Package
                                    @Html.ValidationMessageFor(m => m.PackageId, "", new { @class = "text-danger h3" })
                                </label>
                                @Html.DropDownListFor(model => model.PackageId, new SelectList(Model.PackageList, "PackageId", "PackageName"), "Select Package",
                                      new Dictionary<string, object>
                                          () {
                                          {"id","ddlPackage"},
                                          {"class","form-control form-select js-example-basic-single"},
                                          {"onchange", "javascript:GetPackageId(this.value)"},
                                          })
                            </div>
                        </div>
                    }
                </div>
                <br />
                <fieldset id="individualFieldset" class="ml-2 mr-2 m-1 table-responsive" style="display:none">
                    <table id="Maintable" class="table table-bordered ">
                        <thead>
                            <tr>
                                <td>Select CateGory</td>
                                <td>Select Services</td>
                                <td>Select Date & Time</td>
                                <td style="min-width:130px;max-width:150px !important">Action</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="data-contact-person">
                                <td>
                                    @Html.DropDownListFor(model => model.CategoryId, new SelectList(Model.CategoryList, "CategoryId", "CategoryName"), "Select Category",
                                       new Dictionary<string, object>
                                           () {
                                           {"id","ddlCategory"},
                                           {"class","form-control form-select js-example-basic-single w-100"},
                                           { "style", "width: 200px; !important" },
                                           {"onchange", "javascript:GetSelectedSubCategory(this.value)"},
                                           })

                                </td>
                                <td>
                                    @Html.DropDownListFor(model => model.SubCategoryId, new SelectList(Model.SubCategoryList, "SubCategoryId", "SubCategoryName"), "Select Services",
                                     new Dictionary<string, object>
                                         () {
                                         {"id","ddlSubCategory"},
                                         {"class","form-control form-select js-example-basic-single w-100"},
                                         { "style", "width: 250px; !important" },
                                         {"onchange", "javascript:GetSubCategoryId(this.value)"}
                                         })
                                </td>
                                @*<td>
                                        @Html.EditorFor(model => model.BookingAmount, new { htmlAttributes = new { @class = "form-control total", @readonly = "readonly", @id = "Price", autocomplete = "off" } })
                                    </td>*@
                                @*<td>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.AppointmentDateTime, new { htmlAttributes = new { @class = "form-control datetime", @id = "AppointmentDateTime", autocomplete = "off", style = "width: 174px; !important" } })
                                            <div class="input-group-append d-flex">
                                                <span class="input-group-text" id="AppointmentDateTime1">
                                                    <i class="fa fa-calendar"></i>
                                                </span>
                                            </div>
                                        </div>
                                    </td>*@
                                <td>
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.AppointmentDateTime, new { htmlAttributes = new { @class = "form-control datetime", @id = "servicedatetime", autocomplete = "off" } })<div class="input-group-append">
                                            <span class="input-group-text" id="appointmentIcon">
                                                <i class="fa fa-calendar"></i>
                                            </span>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @*<button type="button" class="btn btn-primary trashbtn" onclick="removeTr(0);">Delete</button>*@
                                    <button type="button" id="btnAdd" class="btn btn-sm btn-primary classAdd"><i class="fa fa-plus-square" aria-hidden="true"></i></button>
                                </td>
                            </tr>
                        </tbody>

                    </table>
                    @*<p>
                            <button id="add" type="button" class="btn btn-primary">Add Assets</button>
                        </p>
                        <hr />*@
                </fieldset>
                <fieldset id="individualFieldset1" class="ml-2 mr-2 m-1 table-responsive" style="display:none;">
                    <table id="PackageTable" class="table table-bordered ">
                        <thead>
                            <tr>
                                <td>Select CateGory</td>
                                <td>Select Services</td>
                                @*<td>Price</td>*@
                                <td>Select Date & Time</td>
                                <td style="min-width:130px;max-width:150px !important">Action</td>
                            </tr>
                        </thead>
                        <tbody id="PackageBody">
                            <tr class="data-contact-person2">
                                <td>
                                    @Html.DropDownListFor(model => model.CategoryId, new SelectList(Model.CategoryList, "CategoryId", "CategoryName"), "Select Category",
                                       new Dictionary<string, object>
                                           () {
                                           {"id","ddlCategory"},
                                           {"class","form-control form-select js-example-basic-single w-100"},
                                           { "style", "width: 200px; !important" },
                                           {"onchange", "javascript:GetSelectedSubCategory(this.value)"},
                                           })

                                </td>
                                <td>
                                    @Html.DropDownListFor(model => model.SubCategoryId, new SelectList(Model.SubCategoryList, "SubCategoryId", "SubCategoryName"), "Select Services",
                                     new Dictionary<string, object>
                                         () {
                                         {"id","ddlSubCategory"},
                                         {"class","form-control form-select js-example-basic-single w-100"},
                                         { "style", "width: 250px; !important" },
                                         {"onchange", "javascript:GetSubCategoryId(this.value)"}
                                         })
                                </td>
                                @*<td>
                                        @Html.EditorFor(model => model.BookingAmount, new { htmlAttributes = new { @class = "form-control total", @readonly = "readonly", @id = "Price", autocomplete = "off" } })
                                    </td>*@
                                @*<td>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.AppointmentDateTime, new { htmlAttributes = new { @class = "form-control datetime", @id = "AppointmentDateTime", autocomplete = "off", style = "width: 174px; !important" } })
                                            <div class="input-group-append d-flex">
                                                <span class="input-group-text" id="AppointmentDateTime1">
                                                    <i class="fa fa-calendar"></i>
                                                </span>
                                            </div>
                                        </div>
                                    </td>*@
                                <td>
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.AppointmentDateTime, new { htmlAttributes = new { @class = "form-control datetime", @id = "servicedatetime", autocomplete = "off" } })<div class="input-group-append">
                                            <span class="input-group-text" id="appointmentIcon">
                                                <i class="fa fa-calendar"></i>
                                            </span>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @*<button type="button" class="btn btn-primary trashbtn" onclick="removeTr(0);">Delete</button>*@
                                    <button type="button" id="btnAdd" class="btn btn-sm btn-primary classAdd2"><i class="fa fa-plus-square" aria-hidden="true"></i></button>
                                </td>
                            </tr>
                        </tbody>

                    </table>
                    @*<p>
                            <button id="add" type="button" class="btn btn-primary">Add Assets</button>
                        </p>
                        <hr />*@
                </fieldset>
                <div class="panel-footer row justify-content-md-center justify-content-sm-center justify-content-lg-center">
                    <div class="col-lg-1 col-md-1 col-sm-1">
                        <input id="btnSubmit" type="submit" class="btn btn-primary pull-right mt-2 mr-5 mb-1" value="Book Appoinment" onclick="StoreAllValues();" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        $("#datepickerIcon").click(function () {
            $("#txtFunctionDate").click(); // Trigger the input field's click event
        });
    });
    $(document).ready(function () {
        $("#timepickerIcon").click(function () {
            $("#txtReadyTime").focus(); // Trigger the input field's focus event
        });
    });
    $(document).ready(function () {
        $("#appointmentIcon").click(function () {
            debugger
            $("#servicedatetime").click();
        });
    });
    //set hide and show view of services
    function SetAppointmentType() {
        var appointmentTypeDropdown = document.getElementById("AppointmentType");
        var individualFieldset = document.getElementById("individualFieldset");
        var individualFieldset1 = document.getElementById("individualFieldset1");
        var packageDropdownContainer = document.getElementById("packageDropdownContainer");

        if (appointmentTypeDropdown.value === "2") {
            individualFieldset.style.display = "block";
            packageDropdownContainer.style.display = "none";
            individualFieldset1.style.display = "none";
        } else if (appointmentTypeDropdown.value === "1") {
            individualFieldset.style.display = "none";
            packageDropdownContainer.style.display = "block";
            individualFieldset1.style.display = "block";
        }
        else {
            individualFieldset.style.display = "none";
            packageDropdownContainer.style.display = "none";
            individualFieldset1.style.display = "none";
        }
    }
    $(".samplechange").change(function () {
        debugger
        var text = $(".samplechange :selected").val();
        if (text == "2") {
            $("#individualFieldset").hide();
            $("#packageDropdownContainer").show();
        }
        else if (text == "1") {
            $("#individualFieldset").show();
            $("#packageDropdownContainer").hide();
        }
        else {
            $("#individualFieldset").hide();
            $("#").hide();
        }
    });
</script>
<script>

    // Add event listener to validate time format
    var readyTimeInput = document.getElementById("txtReadyTime");
    readyTimeInput.addEventListener("input", function () {
        var validTimePattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
        if (!validTimePattern.test(readyTimeInput.value)) {
            readyTimeInput.setCustomValidity("Please enter a valid time in the format HH:mm");
        } else {
            readyTimeInput.setCustomValidity("");
        }
    });
</script>
<script>
    function GetSubCategoryId(_SubCategoryId)
    {
        if (_SubCategoryId == "") { _SubCategoryId = 0; }
        if (_SubCategoryId != 0) {
            var url = "@System.Configuration.ConfigurationManager.AppSettings["notifyKey"]" + "/BookingManagement/SelectSubCategoryDetails";
            $.ajax({
                url: url,
                data: { Subcateid: _SubCategoryId },
                cache: false,
                type: "POST",
                datatype: "json",
                traditional: true,
                success:
                    function (data)
                    {
                        var page = "";
                        for (var i = 0; i < data.SubCateGory.length; i++)
                        {
                            page = data.SubCateGory[i].Amount;
                        }
                        page = page; $('#Price').val(page);
                        calculateTotal();
                    },
                    error: function (reponse)
                    {
                        var page = "Select Service"; $('#Price').html(page);
                    }
            });
        }
        else
        {
            var page = "Select Service"; $('#Price').html(page);
        }
    }
    $('#Maintable').on('change', '.total', function () {
        debugger
        calculateTotal();
    });
</script>
<script>
    var rowCount = $('.data-contact-person').length;
    $(document).ready(function ()
    {
        var flatpickrInput = document.getElementById('servicedatetime');
        var appointmentIcon = document.getElementById('appointmentIcon');

        flatpickr(flatpickrInput, {
            enableTime: true,
            dateFormat: "d-m-Y H:i"
        });

        flatpickrInput.parentNode.insertBefore(appointmentIcon, flatpickrInput.nextSibling);


        $(document).on("click", ".classAdd", function () {
            debugger
            // Fill Up Dropdown
            CategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.CategoryList))');
            SubCategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.SubCategoryList))');
            var CategoryOptions = '';
            var SubCategoryOptions = '';

                    CategoryOptions += '<option value="">Select Category</option>';
                    for (var i = 0; i < CategoryList.length; i++) {
                        CategoryOptions += '<option value="' + CategoryList[i].CategoryId + '">' +
                            CategoryList[i].CategoryName +
                    '</option>';
            }

            SubCategoryOptions += '<option value="">Select SubCategory</option>';
                    for (var i = 0; i < SubCategoryList.length; i++) {
                        SubCategoryOptions += '<option value="' + SubCategoryList[i].SubcategoryId + '">' +
                            SubCategoryList[i].SubcategoryName +
                    '</option>';
            }

            //var contactdiv = '<tr class="data-contact-person newRow' + rowCount + '">' +
            //    '<td>' +
            //    '<select name="CategoryId" id="CategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategory(this.value,' + rowCount + ')" class="form-control form-select js-example-basic-single w-100" style="width: 200px; !important" >' +
            //    CategoryOptions +
            //    '</select></td>' +
            //    '<td>' +
            //    '<select name="SubCategoryId" id="SubCategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategoryId(this.value,' + rowCount + ')" class="form-control form-select js-example-basic-single w-100" style="width: 250px; !important">' +
            //    SubCategoryOptions +
            //    '</select></td>'  +
            //            '<td> <input type="text" name="Price" id="Price' + rowCount + '" class="form-control total" readonly = "readonly" autocomplete="off" style="width: 174px; !important" /> </td> '+
            //    '<td><input type="text" name="AppointmentDateTime" id="AppointmentDateTime' + rowCount + '" class="form-control datetime" autocomplete="off" style="width: 174px; !important" /></td>'  +
            //    '<td>' +
            //    '<button type="button" class="btn btn-sm btn-primary classAdd mx-1"> <i class="fa fa-plus-square" aria-hidden="true"></i> </button>' +
            //    '<button type="button" class="btn btn-sm btn-danger deleteContact"><i class="fa fa-trash" aria-hidden="true"></i></button>' +
            //    '</td>' +
            //    '</tr>';

            //'<td> <input type="text" name="Price" id="Price' + rowCount + '" class="form-control total" readonly="readonly" autocomplete="off"  /> </td> ' +


                    var contactdiv = '<tr class="data-contact-person newRow' + rowCount + '">' +
                        '<td>' +
                        '<select name="CategoryId" id="CategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategory(this.value,' + rowCount + ')" class="form-control form-select js-example-basic-single w-100" style="width: 200px; !important" >' +
                        CategoryOptions +
                        '</select></td>' +
                        '<td>' +
                        '<select name="SubCategoryId" id="SubCategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategoryId(this.value,' + rowCount + ')" class="form-control form-select js-example-basic-single w-100" style="width: 250px; !important">' +
                        SubCategoryOptions +
                        '</select></td>' +
                        '<td>' +
                        '<div class="input-group">' +
                        '<input type="text" name="AppointmentDateTime" id="servicedatetime' + rowCount + '" class="form-control datetime" autocomplete="off" />' +
                        '<div class="input-group-append">' +
                        '<span class="input-group-text"  onclick="javascript:FlatPickerOpen(\'#servicedatetime\',' + rowCount + ')" id="appointmentIcon' + rowCount + '">' +
                        '<i class="fa fa-calendar"></i>' +
                        '</span>' +
                        '</div>' +
                        '</div>' +
                        '</td>'+
                        '<td>' +
                        '<button type="button" class="btn btn-sm btn-primary classAdd mx-1"> <i class="fa fa-plus-square" aria-hidden="true"></i> </button>' +
                        '<button type="button" class="btn btn-sm btn-danger deleteContact"><i class="fa fa-trash" aria-hidden="true"></i></button>' +
                        '</td>' +
                        '</tr>';

                    $('#Maintable').append(contactdiv);
                    $('.js-example-basic-single').select2();
                    var flatpickrInput = document.getElementById('servicedatetime' + rowCount);
                    var appointmentIcon = document.getElementById('appointmentIcon' + rowCount);

                    flatpickr(flatpickrInput, {
                        enableTime: true,
                        dateFormat: "d-m-Y H:i"
                    });

                    flatpickrInput.parentNode.insertBefore(appointmentIcon, flatpickrInput.nextSibling);


                    $(document).on("click", ".deleteContact", function () {
                        debugger
                        var $row = $(this).closest("tr");
                        var rowJson = getRowJson(this);
                        if (!rowJson) {
                            // If the JSON data is empty or not well-formed, simply remove the row and return
                            $row.remove();
                            calculateTotal();
                            return;
                        }
                    });
            rowCount++;

        });

    });
    function FlatPickerOpen(_Textbox,_RowCount) {
        debugger
        $(_Textbox + _RowCount).click();
    }
    function calculateTotal() {
        debugger
        var total = 0;
        $('#Maintable').find('.total').each(function () {
            var price = parseFloat($(this).val());
            if (!isNaN(price)) {
                total += price;
            }
        });
        $('#txtTotal').val(total.toFixed(0));
    }

    function GetRowSubCategoryId(_SubCategoryId, _RowCount)
    {
            if (_SubCategoryId === "")
        {
            return;
        }

        var url = "@System.Configuration.ConfigurationManager.AppSettings["notifyKey"]" + "/BookingManagement/SelectSubCategoryDetails";
        $.ajax({
            url: url,
            data: { Subcateid: _SubCategoryId },
            cache: false,
            type: "POST",
            dataType: "json",
            traditional: true,
            success: function (data)
            {
                var rowcount1 = _RowCount; // Get Row number of Table
                var RowNew = '.newRow' + rowcount1; // Get Row by class name

                $(RowNew).each(function ()
                {
                    var $row = $(this).closest("tr");
                    for (var i = 0; i < data.SubCateGory.length; i++)
                    {
                        var selectedPrice = data.SubCateGory[i].Amount;
                        var selectedSubcategory = data.SubCateGory[i].SubcategoryId;
                        $row.find("input[name='Price']").val(selectedPrice);
                        $row.find("select[name='SubCategoryId'] option:selected").text(selectedSubcategory);
                        calculateTotal();
                    }
                });
            },
            error: function (reponse)
            {
                var rowcount1 = _RowCount; // Get Row number of Table
                var $row = $(this).closest("tr");
                $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="">Service Not Found</option>');
            },
        });
    }

    //Function to get the JSON data of the row containing the clicked delete button
    function getRowJson(button) {
        debugger
        var $row = $(button).closest("tr");
        var rowData =
        {
            CategoryId: $row.find("input[name='CategoryId']").val(),
            SubCategoryId: $row.find("input[name='SubCategoryId']").val(),
            Price: $row.find("input[name='Price']").val(),
            AppointmentDateTime: $row.find("input[name='AppointmentDateTime']").val()
        };

        // Check if ShopId is stored in an input field or a dropdown
        var SubCategoryDropdown = $row.find("select[name='SubCategoryId']");
        var CategoryDropdown = $row.find("select[name='CategoryId']")
        if (SubCategoryDropdown.length) {
            rowData.SubCategoryId = SubCategoryDropdown.val();
        }
        if (CategoryDropdown.length) {
            rowData.CategoryId = CategoryDropdown.val();
        }

        // Check if any property in the rowData object is not set (i.e., empty or undefined)
        for (var key in rowData) {
           // comment a if condition on 09-08-2023 if (rowData.hasOwnProperty(key) && (rowData[key] === undefined || rowData[key] === ''))
                if (rowData.hasOwnProperty(key)) {
                // If the JSON data is not fully filled, simply remove the row and return null
                $row.remove();
                return null;
            }
        }
        return rowData;
    }

    function GetSelectedSubCategory(_Category) {
        debugger
        if (_Category == "") {
            _Category = 0;
        }
        if (_Category != 0 ) {
            var url = "@System.Configuration.ConfigurationManager.AppSettings["myKey"]" + "/BookingManagement/SelectSubCategoryJson";

            $.ajax({
                url: url,
                data: { ddlCategoryDropdown: _Category  } ,
                cache: false,
                type: "POST",
                datatype: "json",
                traditional: true,

                success: function (data) {
                    debugger
                    var ddlSubCategory = $("#ddlSubCategory");
                    ddlSubCategory.empty(); // Clear existing options
                    ddlSubCategory.append('<option value="">Select Services</option>');
                    for (var i = 0; i < data.SubCateGory.length; i++) {
                        ddlSubCategory.append('<option value="' + data.SubCateGory[i].SubCategoryId + '">' + data.SubCateGory[i].SubCategoryName + '</option>');
                    }
                    $('#Price').val(0);
                    calculateTotal();
                },
                error: function (reponse) {
                    var ddlSubCategory = $("#ddlSubCategory");
                    ddlSubCategory.empty(); // Clear existing options
                    ddlSubCategory.append('<option value="">Services Not Found</option>');
                }
            });
        }
        else {
            var ddlSubCategory = $("#ddlSubCategory");
            ddlSubCategory.empty(); // Clear existing options
            ddlSubCategory.append('<option value="">Services Not Found</option>');
            $('#Price').val(0);
            calculateTotal();
        }
    }
    function GetRowSubCategory(_Category,_RowCount) {
        debugger
        if (_Category == "") {
            _Category = 0;
        }
        if (_Category != 0 ) {
            var url = "@System.Configuration.ConfigurationManager.AppSettings["myKey"]" + "/BookingManagement/SelectSubCategoryJson";

            $.ajax({
                url: url,
                data: { ddlCategoryDropdown: _Category  } ,
                cache: false,
                type: "POST",
                datatype: "json",
                traditional: true,

                success: function (data) {
                    debugger
                    var rowcount1 = _RowCount;  // Get Row number of Table
                    var RowNew = '.newRow' + rowcount1; // Get Row by class name
                    $(RowNew).each(function () {
                        debugger
                        var $row = $(this).closest('tr');
                        $row.find("#SubCategoryDropdown" + rowcount1).empty();
                        $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="">Select Services</option>');
                        for (var i = 0; i < data.SubCateGory.length; i++) {
                            $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="' + data.SubCateGory[i].SubCategoryId + '">' + data.SubCateGory[i].SubCategoryName +
                                '</option>');
                        }
                        $row.find("input[name='Price']").val(0);
                        calculateTotal();
                    });
                },
                error: function (reponse) {
                    var $row = $(this).closest('tr');
                    $row.find("#SubCategoryDropdown" + rowcount1).empty();
                    $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="">Service Not Found</option>');
                }
            });
        }
        else {
            var $row = $(this).closest('tr');
            var rowcount1 = _RowCount;
            var ddlSubCategory = $("#SubCategoryDropdown" + rowcount1);
            ddlSubCategory.empty();
            ddlSubCategory.append('<option value="">Service Not Found</option>');
            $row.find("input[name='Price']").val(0);
            calculateTotal();

        }
    }
</script>
<script>
    function GetPackageId(_PackageId)
    {
        debugger
        if (_PackageId == "") { _PackageId = 0; }
        if (_PackageId != 0) {
            var url = "@System.Configuration.ConfigurationManager.AppSettings["notifyKey"]" + "/BookingManagement/SelectPackages";
            $.ajax({
                url: url,
                data: { PackageId: _PackageId },
                cache: false,
                type: "POST",
                datatype: "json",
                traditional: true,
                success:
                    function (data)
                    {
                        debugger
                        var tableBody = $('#PackageBody');
                        tableBody.empty();
                        if (data.length === 0)
                        {
                            // If no rows fetched, add a new empty row
                            addEmptyRow();
                        }
                        else
                        {
                            //'<td><input type="text" name="BookingAmount" id="BookingAmount" class="form-control total" value="' + item.BookingAmount + '" readonly="readonly" autocomplete="off"/> </td> ' +

                            CategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.CategoryList))');
                            SubCategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.SubCategoryList))');
                            var CategoryOptions = '';
                            var SubCategoryOptions = '';

                            CategoryOptions += '<option value="">Select Category</option>';
                            for (var i = 0; i < CategoryList.length; i++)
                            {
                                CategoryOptions += '<option value="' + CategoryList[i].CategoryId + '">' + CategoryList[i].CategoryName + '</option>';
                            }

                            SubCategoryOptions += '<option value="">Select SubCategory</option>';
                            for (var i = 0; i < SubCategoryList.length; i++)
                            {
                                SubCategoryOptions += '<option value="' + SubCategoryList[i].SubcategoryId + '">' + SubCategoryList[i].SubcategoryName + '</option>';
                            }

                            $.each(data.sittingList, function (index, item)
                            {
                                debugger
                                var contactdiv = '<tr class="data-contact-person2 newRow' + rowCount + '">' +
                                    '<td><input type="text" name="CategoryName" class="form-control" value="' + item.CategoryName + '" readonly="readonly" autocomplete="off" /><input type="text" name="CategoryId" id="CategoryDropdown" class="form-control text-center" value="' + item.CategoryId + '" hidden/> </td> ' +
                                    '<td><input type="text" name="SubCategoryName" class="form-control" value="' + item.SubCategoryName + '" readonly="readonly" autocomplete="off" /><input type="text" name="SubCategoryId" id="SubCategoryDropdown" class="form-control text-center" value="' + item.SubCategoryId + '" hidden/> </td> ' +
                                '<td>' +
                                '<div class="input-group">' +
                                    '<input type="text" name="AppointmentDateTime" id="servicedatetime2' + rowCount + '" class="form-control datetime" autocomplete="off" />' +
                                    '<div class="input-group-append">' +
                                    '<span class="input-group-text"  onclick="javascript:FlatPickerOpen(\'#servicedatetime2\',' + rowCount + ')" id="appointmentIcon2' + rowCount + '">' +
                                    '<i class="fa fa-calendar"></i>' +
                                '</span>' +
                                '</div>' +
                                '</div>' +
                                '</td>' +
                                '<td>' +
                                '<button type="button" class="btn btn-sm btn-primary classAdd2 mx-1"><i class="fa fa-plus-square" aria-hidden="true"></i></button>' +
                                '<button type="button" class="btn btn-sm btn-danger deleteContact"><i class="fa fa-trash" aria-hidden="true"></i></button>' +
                                '</td>' +
                                '</tr>';

                                $('#PackageBody').append(contactdiv);
                                $('.js-example-basic-single').select2();
                                var flatpickrInput = document.getElementById('servicedatetime2' + rowCount);
                                var appointmentIcon = document.getElementById('appointmentIcon2' + rowCount);

                                flatpickr(flatpickrInput, {
                                    enableTime: true,
                                    dateFormat: "d-m-Y H:i"
                                });

                                flatpickrInput.parentNode.insertBefore(appointmentIcon, flatpickrInput.nextSibling);

                                rowCount++;
                            });
                            $(document).on("click", ".deleteContact", function () {
                                    debugger
                                    var $row = $(this).closest("tr");
                                    var rowJson = getRowJson(this);
                                    if (!rowJson) {
                                        // If the JSON data is empty or not well-formed, simply remove the row and return
                                        $row.remove();
                                        calculateTotal();
                                        return;
                                    }
                           });
                        }

                    },
                    error: function (reponse)
                    {
                        var page = "Select Service"; $('#Price').html(page);
                    }
            });
        }
        else
        {
            var page = "Select Service"; $('#Price').html(page);
        }
    }
    //$('#Maintable').on('change', '.total', function () {
    //    debugger
    //    calculateTotal();
    //});
</script>
<script>
//For Package to bind data
    var rowCount = $('.data-contact-person2').length;
    $(document).ready(function ()
    {
        var flatpickrInput = document.getElementById('servicedatetime');
        var appointmentIcon = document.getElementById('appointmentIcon');

        flatpickr(flatpickrInput, {
            enableTime: true,
            dateFormat: "d-m-Y H:i"
        });

        flatpickrInput.parentNode.insertBefore(appointmentIcon, flatpickrInput.nextSibling);


        $(document).on("click", ".classAdd2", function () {
            debugger
            // Fill Up Dropdown
            CategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.CategoryList))');
            SubCategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.SubCategoryList))');
            var CategoryOptions = '';
            var SubCategoryOptions = '';

                    CategoryOptions += '<option value="">Select Category</option>';
                    for (var i = 0; i < CategoryList.length; i++) {
                        CategoryOptions += '<option value="' + CategoryList[i].CategoryId + '">' +
                            CategoryList[i].CategoryName +
                    '</option>';
            }

            SubCategoryOptions += '<option value="">Select SubCategory</option>';
                    for (var i = 0; i < SubCategoryList.length; i++) {
                        SubCategoryOptions += '<option value="' + SubCategoryList[i].SubcategoryId + '">' +
                            SubCategoryList[i].SubcategoryName +
                    '</option>';
            }



                    var contactdiv = '<tr class="data-contact-person newRow' + rowCount + '">' +
                        '<td>' +
                        '<select name="CategoryId" id="CategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategory(this.value,' + rowCount + ')" class="form-control form-select js-example-basic-single w-100" style="width: 200px; !important" >' +
                        CategoryOptions +
                        '</select></td>' +
                        '<td>' +
                        '<select name="SubCategoryId" id="SubCategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategoryId(this.value,' + rowCount + ')" class="form-control form-select js-example-basic-single w-100" style="width: 250px; !important">' +
                        SubCategoryOptions +
                        '</select></td>' +
                        '<td>' +
                        '<div class="input-group">' +
                        '<input type="text" name="AppointmentDateTime" id="servicedatetime' + rowCount + '" class="form-control datetime" autocomplete="off" />' +
                        '<div class="input-group-append">' +
                        '<span class="input-group-text"  onclick="javascript:FlatPickerOpen(\'#servicedatetime\',' + rowCount + ')" id="appointmentIcon' + rowCount + '">' +
                        '<i class="fa fa-calendar"></i>' +
                        '</span>' +
                        '</div>' +
                        '</div>' +
                        '</td>'+
                        '<td>' +
                        '<button type="button" class="btn btn-sm btn-primary classAdd2 mx-1"> <i class="fa fa-plus-square" aria-hidden="true"></i> </button>' +
                        '<button type="button" class="btn btn-sm btn-danger deleteContact2"><i class="fa fa-trash" aria-hidden="true"></i></button>' +
                        '</td>' +
                        '</tr>';

            $('#PackageBody').append(contactdiv);
                    $('.js-example-basic-single').select2();
                    var flatpickrInput = document.getElementById('servicedatetime' + rowCount);
                    var appointmentIcon = document.getElementById('appointmentIcon' + rowCount);

                    flatpickr(flatpickrInput, {
                        enableTime: true,
                        dateFormat: "d-m-Y H:i"
                    });

                    flatpickrInput.parentNode.insertBefore(appointmentIcon, flatpickrInput.nextSibling);


                    $(document).on("click", ".deleteContact2", function () {
                        debugger
                        var $row = $(this).closest("tr");
                        var rowJson = getRowJson(this);
                        if (!rowJson) {
                            // If the JSON data is empty or not well-formed, simply remove the row and return
                            $row.remove();
                            calculateTotal();
                            return;
                        }
                    });
            rowCount++;

        });
    });
    function FlatPickerOpen(_Textbox,_RowCount) {
        debugger
        $(_Textbox + _RowCount).click();
    }
</script>
<script>
    // For Store Data
    function StoreAllValues() {
        debugger
        var BookAppointment = [];
        var tableSelectorMain = "#Maintable";
        var tableSelectorPackage = "#PackageTable";

        $(tableSelectorMain + " TBODY TR").each(function () {
            var row = $(this);
            var MainData = {};

            debugger
            //MainData.CategoryId = row.find("td:eq(0) input[name='CategoryId']").val();
            //MainData.SubCategoryId = row.find("td:eq(0) input[name='SubCategoryId']").val();

            // Check if ShopId is stored in an input field or a dropdown
            var CategoryIdInput = row.find("td:eq(0) input[name='CategoryId']");
            var CategoryIdDropdown = row.find("td:eq(0) select[name='CategoryId']");
            if (CategoryIdInput.length) {
                MainData.CategoryId = CategoryIdInput.val();
            }
            else if (CategoryIdDropdown.length) {
                MainData.CategoryId = CategoryIdDropdown.val();
            }

            var SubCategoryIdInput = row.find("td:eq(1) input[name='SubCategoryId']");
            var SubCategoryIdDropdown = row.find("td:eq(1) select[name='SubCategoryId']");
            if (SubCategoryIdInput.length) {
                MainData.SubCategoryId = SubCategoryIdInput.val();
            }
            else if (SubCategoryIdDropdown.length) {
                MainData.SubCategoryId = SubCategoryIdDropdown.val();
            }

            MainData.AppointmentDateTime = row.find("td:eq(2) input[name='AppointmentDateTime']").val();
            BookAppointment.push(MainData);
        });

        var serializedData = JSON.stringify(BookAppointment);
        $('input[name="BookAppointment"]').val(serializedData);
        $('#myForm').submit();
    }
</script>

