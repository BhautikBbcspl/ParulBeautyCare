@model ParulBeautyCareViewModel.ViewModel.BookAppointmentViewModel
@{
    ViewBag.Title = "BookAppointment";
    ViewBag.Module = "BookingManagement";
}
<style>
    .field-icon {
        float: right;
        margin-top: -30px;
        position: relative;
        right: 15px;
        z-index: 2;
    }
</style>
<div class="content-wrapper" style="height:auto !important;">
  
            <div class="card">
                <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                    <div class="bg-gradient-pinkHeader shadow-primary border-radius-lg pt-3 d-flex justify-content-between row">
                        <h2 class="text-white text-capitalize ps-3 title_margin col-md-6"><b>Book Appointment</b></h2>
                        <a class="dedcription-btn anc col-md-6" href="@Url.Action("ViewBookedAppointment", "BookingManagement")">
                            <span class="name-descripeion"> <b> VIEW BOOKINGS</b> </span>
                            <div class="btn-icon brain">
                                <i class="fas fa-plus"> </i>
                            </div>
                        </a>
                    </div>
                </div>
                @using (Html.BeginForm("AddBookAppointment", "BookingManagement", FormMethod.Post, new { @class = "forms-sample", autocomplete = "off" }))
                {
            <div class="card-body">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(x => x.Action)
                @Html.HiddenFor(x => x.AdvanceBookingId, new { @id = "txtAdvanceBookingId" })
                @Html.Hidden("BookAppointment", null, new { id = "BookAppointmentInput", @class = "BookAppointmentInput" })
                <div class="row form-group">
                    <div class="col-sm-12 col-md-4 col-lg-3">
                        <label class="col-form-label">
                            Select Company
                            @Html.ValidationMessageFor(m => m.DepartmentId, "", new { @class = "text-danger h3" })
                        </label>
                        @Html.DropDownListFor(m => m.DepartmentId, new SelectList(Model.DeptList, "DepartmentId", "DepartmentName"), "Select Company",
                            new Dictionary<string, object>() {
                                       {"id","ddlDeptId"},
                                       { "class","form-control form-select js-example-basic-single w-100"}
                                })
                    </div>
                    <div class="col-sm-12 col-md-4 col-lg-3">
                        <label class="col-form-label">
                            Customer Name
                            @Html.ValidationMessageFor(m => m.CustomerName, "", new { @class = "text-danger h3" })
                        </label>
                        @Html.TextBoxFor(m => m.CustomerName, new Dictionary<string, object>() {
                                                                    {"id","txtCustomerName"},
                                                                    {"class","form-control"},
                                                                    {"autocomplete","off"},
                                                                    {"required","required"},
                                                                    {"placeholder","Enter Customer Name"}
                                                                    })
                    </div>
                    <div class="col-sm-12 col-md-4 col-lg-3">
                        <label class="col-form-label">
                            Contact No
                            @Html.ValidationMessageFor(m => m.ContactNo, "", new { @class = "text-danger h3" })
                        </label>
                        @Html.TextBoxFor(m => m.ContactNo, new Dictionary<string, object>() {
                                                                    {"id","txtContactNo"},
                                                                    {"class","form-control"},
                                                                    {"autocomplete","off"},
                                                                    {"required","required"},
                                                                    {"placeholder","Enter Contact No"}
                                                                    })
                    </div>
                    <div class="col-sm-12 col-md-4 col-lg-3">
                        <label class="col-form-label">
                            Address
                            @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger h3" })
                        </label>
                        @Html.TextBoxFor(m => m.Address, new Dictionary<string, object>() {
                                                                    {"id","txtAddress"},
                                                                    {"class","form-control"},
                                                                    {"autocomplete","off"},
                                                                    {"required","required"},
                                                                    {"placeholder","Enter Address"}
                                                                    })
                    </div>
                    <div class="col-sm-12 col-md-4 col-lg-3">
                        <label class="col-form-label">
                            Function/Service Date
                            @Html.ValidationMessageFor(m => m.FunctionDate, "", new { @class = "text-danger h3" })
                        </label>
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.FunctionDate, new Dictionary<string, object>() {
                                                                        {"id","txtFunctionDate"},
                                                                        {"class","form-control"},
                                                                        {"required","required"},
                                                                        {"placeholder","Select Function Date"}
                                                                        })
                            <div class="input-group-append d-flex">
                                <span class="input-group-text" id="datepickerIcon" style="color: #212529 !important; border: 1px solid #ced4da !important; ">
                                    <i class="fa fa-calendar"></i>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-12 col-md-4 col-lg-3">
                        <label class="col-form-label">
                            Function/Service Time
                            @Html.ValidationMessageFor(m => m.ReadyTime, "", new { @class = "text-danger h3" })
                        </label>
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.ReadyTime, new Dictionary<string, object>() {
                                                                        {"id","txtReadyTime"},
                                                                        {"class","form-control timepicker"},
                                                                        {"autocomplete","off"},
                                                                        {"required","required"},
                                                                        {"placeholder", "Select Time"},
                                                                        {"pattern", "([01]?[0-9]|2[0-3]):[0-5][0-9]"}
                       })
                            <div class="input-group-append d-flex">
                                <span class="input-group-text timepicker-icon d-flex align-items-center" id="timepickerIcon" style="color: #212529 !important; border: 1px solid #ced4da !important; ">
                                    <i class="fa fa-clock"></i>
                                </span>
                            </div>
                        </div>
                    </div>
                    @*<div class="col-sm-12 col-md-4 col-lg-3" style="margin-top: auto">
                <div class="form-check">
                    <label class="form-check-label">
                        <input type="checkbox" name="IsEMI" id="class" value="true" class="form-check-input" @(Model.IsEMI ? "checked" : "")>
                        Is EMI
                    </label>
                </div>
            </div>*@
                    @*<div class="col-sm-12 col-md-4 col-lg-3">
                <label class="col-form-label">
                    Deposit Amount
                    @Html.ValidationMessageFor(m => m.DepositAmount, "", new { @class = "text-danger h3" })
                </label>
                @Html.TextBoxFor(m => m.DepositAmount, new Dictionary<string, object>() {
                                                            {"id","txtDepositAmount"},
                                                            {"class","form-control"},
                                                            {"autocomplete","off"},
                                                            {"required","required"},
                                                            {"placeholder","Enter Deposit Amount"},
                                                            {"type","number"},
                                                            {"step","1"}
                                                            })
            </div>*@
                    <div class="col-sm-12 col-md-4 col-lg-3">
                        <label class="col-form-label">
                            Total Amount
                            @*@Html.ValidationMessageFor(m => m.BookingAmount, "", new { @class = "text-danger h3" })*@
                        </label>
                        @Html.TextBoxFor(m => m.BookingAmount, new Dictionary<string, object>() {
                                                                    {"id","txtTotal"},
                                                                    {"class","form-control"},
                                                                    {"autocomplete","off"},
                                                                    //{"required","required"},
                                                                    {"readonly","readonly" }
                                                                    })
                    </div>

                    <div class="col-sm-12 col-md-4 col-lg-3">
                        <label class="col-form-label">Service Type @Html.ValidationMessageFor(m => m.AppointmentType, "", new { @class = "text-danger h3" })</label>
                        @Html.DropDownListFor(x => x.AppointmentType, new List<SelectListItem>
                               {
                                   new SelectListItem{ Text="Select Appointment Type", Value = "",Selected=true  },
                                   new SelectListItem{ Text="Package", Value = "1"},
                                   new SelectListItem{ Text="Individual", Value = "2" }
                                }, new { @class = "form-control form-select js-example-basic-single", @id = "AppointmentType", @onchange = "SetAppointmentType()" })
                    </div>
                    <div class="col-sm-12 col-md-4 col-lg-3" id="packageDropdownContainer" style="display: none;">
                        <label class="col-form-label">
                            Package

                            @Html.ValidationMessageFor(m => m.PackageId, "", new { @class = "text-danger h3" })
                        </label>
                        @Html.DropDownListFor(model => model.PackageId, new SelectList(Model.PackageList, "PackageId", "PackageName"), "Select Package",
                              new Dictionary<string, object>
                                  () {
                                  {"id","ddlPackage"},
                                  {"class","form-control form-select js-example-basic-single"},
                                  {"onchange", "javascript:GetPackageId(this.value)"},
                                  })
                    </div>
                </div>
            </div>
                <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg mt-0">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Appointment </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body" id="modalContent" style="padding:0px 26px !important">
                <!-- Controller View Will Be Inserted Here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
                    <!--<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="exampleModalLabel">Customer Booking Details</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>

                                <div class="modal-body">-->
                                    <!-- Modal Body Content Goes Here -->
                                    <!--<div id="Mycalendar" class="full-calendar"></div>

                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>-->
                    <br />
                    @*<div style="overflow:scroll">*@
                    <fieldset id="individualFieldset" class="ml-2 mr-2 m-1 table-responsive" style="display: none; overflow: scroll">
                        <table id="Maintable" class="table table-bordered ">
                            <thead>
                                <tr>
                                    <td>Select CateGory</td>
                                    <td>Select Services</td>
                                    <td>No of Sitting</td>
                                    <td>Interval's(Days)</td>
                                    <td>Remark</td>
                                    <td style="min-width:130px;max-width:150px !important">Action</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="data-contact-person">
                                    <td>
                                        @Html.DropDownListFor(model => model.CategoryId, new SelectList(Model.CategoryList, "CategoryId", "CategoryName"), "Select Category",
                                           new Dictionary<string, object>
                                               () {
                                               {"id","ddlCategory"},
                                               {"class","form-control form-select selectDropdown w-100"},
                                               { "style", "width: 200px; !important" },
                                               {"required","required" },
                                               {"onchange", "javascript:GetSelectedSubCategory(this.value)"},
                                               })
                                    </td>
                                    <td>
                                        @Html.DropDownListFor(model => model.SubCategoryId, new SelectList(Model.SubCategoryList, "SubCategoryId", "SubCategoryName"), "Select Services",
                                         new Dictionary<string, object>
                                             () {
                                             {"id","ddlSubCategory"},
                                             {"class","form-control form-select selectDropdown w-100"},
                                             { "style", "width: 250px; !important" },
                                             {"required","required" },
                                             {"onchange", "javascript:GetSubCategoryId(this.value)"}
                                             })
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.NoOfSitting, new
                                        {
                                            htmlAttributes = new { @class = "form-control", @readonly = "readonly", @id = "NoOfSitting", autocomplete = "off", required = "required" }
                                        })
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.DayInterval, new
                                        {
                                            htmlAttributes = new { @class = "form-control", @readonly = "readonly", @id = "DayInterval", autocomplete = "off", required = "required" }
                                        })
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.Remark, new
                                        {
                                            htmlAttributes = new { @class = "form-control", @id = "Remark", autocomplete = "off" }
                                        })
                                    </td>
                                    <td style="display:none">
                                        @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control total", @readonly = "readonly", @id = "Price", autocomplete = "off", required = "required" } })
                                        @Html.HiddenFor(model => model.IntePackageServiceId, new { htmlAttributes = new { @class = "form-control", @id = "IntePackageServiceId" } })

                                    </td>
                                    @*<td>
                                @Html.EditorFor(model => model.BookingAmount, new { htmlAttributes = new { @class = "form-control total", @readonly = "readonly", @id = "Price", autocomplete = "off" } })
                            </td>*@
                                    <td>
                                        @*<button type="button" class="btn btn-primary trashbtn" onclick="removeTr(0);">Delete</button>*@
                                        <button type="button" id="btnAdd" class="btn btn-sm btn-primary classAdd"><i class="fa fa-plus-square" aria-hidden="true"></i></button>
                                    </td>
                                </tr>
                            </tbody>

                        </table>
                        @*<p>
                    <button id="add" type="button" class="btn btn-primary">Add Assets</button>
                </p>
                <hr />*@
                    </fieldset>
                    <fieldset id="individualFieldset1" class="ml-2 mr-2 m-1 table-responsive" style="display: none; overflow: scroll">
                        <table id="PackageTable" class="table table-bordered ">
                            <thead>
                                <tr>
                                    <td>Select CateGory</td>
                                    <td>Select Services</td>
                                    <td>No of Sitting</td>
                                    <td>Interval's(Days)</td>
                                    <td>Remark</td>
                                    <td style="min-width:130px;max-width:150px !important">Action</td>
                                </tr>
                            </thead>
                            <tbody id="PackageBody">
                                @*<tr class="data-contact-person2">
                        <td>
                            @Html.DropDownListFor(model => model.CategoryId, new SelectList(Model.CategoryList, "CategoryId", "CategoryName"), "Select Category",
                               new Dictionary<string, object>
                                   () {
                                   {"id","ddlCategory"},
                                   {"class","form-control form-select js-example-basic-single w-100"},
                                   { "style", "width: 200px; !important" },
                                   {"onchange", "javascript:GetSelectedSubCategory(this.value)"},
                                   })

                        </td>
                        <td>
                            @Html.DropDownListFor(model => model.SubCategoryId, new SelectList(Model.SubCategoryList, "SubCategoryId", "SubCategoryName"), "Select Services",
                             new Dictionary<string, object>
                                 () {
                                 {"id","ddlSubCategory"},
                                 {"class","form-control form-select js-example-basic-single w-100"},
                                 { "style", "width: 250px; !important" },
                                 {"onchange", "javascript:GetSubCategoryId(this.value)"}
                                 })
                        </td>
                        <td>
                            @Html.EditorFor(model => model.NoOfSitting, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @id = "NoOfSitting", autocomplete = "off" } })
                        </td>*@
                                @*<td>
                            @Html.EditorFor(model => model.BookingAmount, new { htmlAttributes = new { @class = "form-control total", @readonly = "readonly", @id = "Price", autocomplete = "off" } })
                        </td>*@
                                <!--<td>-->
                                @*<button type="button" class="btn btn-primary trashbtn" onclick="removeTr(0);">Delete</button>*@
                                <!--<button type="button" id="btnAdd" class="btn btn-sm btn-primary classAdd2"><i class="fa fa-plus-square" aria-hidden="true"></i></button>
                        </td>
                    </tr>-->
                            </tbody>

                        </table>
                        @*<p>
                    <button id="add" type="button" class="btn btn-primary">Add Assets</button>
                </p>
                <hr />*@
                    </fieldset>
                       @*</div>*@
                    <div class="panel-footer row justify-content-md-center justify-content-sm-center justify-content-lg-center">
                        @*<div class="col-lg-1 col-md-1 col-sm-1">*@

                        <CENTER class="col-lg-1 col-md-1 col-sm-1">
                            <input id="btnSubmit" type="submit" class="btn btn-primary pull-right mt-2 mr-5 mb-1" value="Book Appointment" onclick="StoreAllValues(event);" />
                        </CENTER>
                    </div>
                }
            </div>
       
</div>


<script>
    $(document).ready(function () {
        $('.selectDropdown').select2();
        $("#datepickerIcon").click(function () {
            $("#txtFunctionDate").click();
        });
        $("#timepickerIcon").click(function () {
            $("#txtReadyTime").focus();
        });
         var textInput = $("#txtAdvanceBookingId").val();
        if (textInput != 0 || textInput == null) {
            document.getElementById("txtCustomerName").readOnly = true;
            document.getElementById("txtContactNo").readOnly = true;
            document.getElementById("txtAddress").readOnly = true;
        }
        else {
            document.getElementById("txtCustomerName").readOnly = false;
            document.getElementById("txtContactNo").readOnly = false;
            document.getElementById("txtAddress").readOnly = false;
        }

        function BookingCalendar(selectedDate) {
             var url = "@Url.Action("AppointmentChecking", "BookingManagement")";
             url += "?selectedDate=" + encodeURIComponent(selectedDate);

            $.get(url, function (data) {
                $('#modalContent').html(data);
             });
            $("#exampleModal").modal("show");
        }
        $("#txtFunctionDate").change(function () {
            var selectedDate = $("#txtFunctionDate").val(); // Get the selected date here
            BookingCalendar(selectedDate);
        });
    });
    function SetAppointmentType() {
        var appointmentTypeDropdown = document.getElementById("AppointmentType");
        var individualFieldset = document.getElementById("individualFieldset");
        var individualFieldset1 = document.getElementById("individualFieldset1");
        var packageDropdownContainer = document.getElementById("packageDropdownContainer");

        if (appointmentTypeDropdown.value === "2") {
            individualFieldset.style.display = "block";
            packageDropdownContainer.style.display = "none";
            individualFieldset1.style.display = "none";
            $('.selectDropdown').select2();
            amountFromViewBag = 0;
            calculateTotal();

        } else if (appointmentTypeDropdown.value === "1") {
            var ddlPackage = $("#ddlPackage");
            ddlPackage.val(null).trigger("change");
            individualFieldset.style.display = "none";
            packageDropdownContainer.style.display = "block";
            individualFieldset1.style.display = "none";
            amountFromViewBag = 0;
            calculateTotal();
            $('#txtTotal').val(0);
        }
        else {
            individualFieldset.style.display = "none";
            packageDropdownContainer.style.display = "none";
            individualFieldset1.style.display = "none";
            amountFromViewBag = 0;
            $('#txtTotal').val(0);

        }
    }
</script>
<script>
    var readyTimeInput = document.getElementById("txtReadyTime");
    readyTimeInput.addEventListener("input", function () {
        var validTimePattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
        if (!validTimePattern.test(readyTimeInput.value)) {
            readyTimeInput.setCustomValidity("Please enter a valid time in the format HH:mm");
        } else {
            readyTimeInput.setCustomValidity("");
        }
    });
</script>
<script>
    function GetSubCategoryId(_SubCategoryId)
    {
        if (_SubCategoryId == "") { _SubCategoryId = 0; }
        if (_SubCategoryId != 0) {
            var url = "@System.Configuration.ConfigurationManager.AppSettings["notifyKey"]" + "/BookingManagement/SelectSubCategoryDetails";
            $.ajax({
                url: url,
                data: { Subcateid: _SubCategoryId },
                cache: false,
                type: "POST",
                datatype: "json",
                traditional: true,
                success:
                    function (data)
                    {
                        var page = "";
                        var Sitting = "";
                        var Intervals = "";
                        for (var i = 0; i < data.SubCateGory.length; i++)
                        {
                            page = data.SubCateGory[i].Amount;
                            sitting = data.SubCateGory[i].NoOfSitting;
                            Intervals = data.SubCateGory[i].DayInterval;
                        }
                        page = page;
                        $('#Price').val(page);
                        $('#NoOfSitting').val(sitting);
                        $('#DayInterval').val(Intervals);
                        $('#IntePackageServiceId').val(0);
                        calculateTotal();
                    },
                    error: function (reponse)
                    {
                        $('#Price').val(0);
                        $('#NoOfSitting').val('');
                        $('#DayInterval').val('');
                        $('#IntePackageServiceId').val(0);
                    }
            });
        }
        else
        {
            $('#Price').val(0);
            $('#NoOfSitting').val('');
            $('#DayInterval').val('');
            $('#IntePackageServiceId').val(0);
            calculateTotal();
        }
    }
    $('#Maintable').on('change', '.total', function () {
        calculateTotal();
    });
</script>
<script>
    var amountFromViewBag;
    var rowCount = $('.data-contact-person').length;
    $(document).ready(function ()
    {
        $("#txtFunctionDate").flatpickr({
            dateFormat: "d-m-Y",
            minDate: "today"
        });
        $('#IntePackageServiceId').val(0);
        $(document).on("click", ".classAdd", function () {
            CategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.CategoryList))');
            SubCategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.SubCategoryList))');
            var CategoryOptions = '';
            var SubCategoryOptions = '';

                    CategoryOptions += '<option value="">Select Category</option>';
                    for (var i = 0; i < CategoryList.length; i++) {
                        CategoryOptions += '<option value="' + CategoryList[i].CategoryId + '">' +
                            CategoryList[i].CategoryName +
                    '</option>';
            }

            SubCategoryOptions += '<option value="">Select SubCategory</option>';
                    for (var i = 0; i < SubCategoryList.length; i++) {
                        SubCategoryOptions += '<option value="' + SubCategoryList[i].SubCategoryId + '">' +
                            SubCategoryList[i].SubCategoryName +
                    '</option>';
            }

            var contactdiv = '<tr class="data-contact-person newRow' + rowCount + '">' +
                '<td>' +
                '<select name="CategoryId" id="CategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategory(this.value,' + rowCount + ')" class="form-control form-select selectDropdown w-100" style="width: 200px; !important" required>' +
                CategoryOptions +
                '</select></td>' +
                '<td>' +
                '<select name="SubCategoryId" id="SubCategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategoryId(this.value,' + rowCount + ')" class="form-control form-select selectDropdown w-100" style="width: 250px; !important" required>' +
                SubCategoryOptions +
                '</select></td>' +
                '<td> <input type="text" name="NoOfSitting" id="NoOfSitting"' + rowCount + '" class="form-control" readonly="readonly" required/> </td> ' + '<td> <input type="text" name="DayInterval" id="DayInterval"' + rowCount + '" class="form-control" readonly="readonly" required/> </td> ' + '<td> <input type="text" name="Remark" id="Remark"' + rowCount + '" class="form-control"/><input type="text" name="Price" id="Price' + rowCount + '" class="form-control total" readonly="readonly"  hidden required/><input type="text" name="IntePackageServiceId" id="IntePackageServiceId' + rowCount + '" class="form-control total" readonly="readonly"  hidden required/> </td> ' +
                '<td>' +
                '<button type="button" class="btn btn-sm btn-primary classAdd mx-1"> <i class="fa fa-plus-square" aria-hidden="true"></i> </button>' +
                '<button type="button" class="btn btn-sm btn-danger deleteContact"><i class="fa fa-trash" aria-hidden="true"></i></button>' +
                '</td>' +
                '</tr>';

                    $('#Maintable').append(contactdiv);
                    $('.selectDropdown').select2();

                    $(document).on("click", ".deleteContact", function () {
                        var $row = $(this).closest("tr");
                        var rowJson = getRowJson(this);
                        if (!rowJson) {
                            $row.remove();
                            var count = $("#Maintable tr").length;
                            if (count > 0) {
                                calculateTotal();
                            }
                            else {
                                amountFromViewBag = 0;
                                $('#txtTotal').val(0);
                            }
                            return;
                        }
                    });
            rowCount++;

        });

    });
    function calculateTotal() {
       debugger
        var selectedValue = $("#AppointmentType").val();
        var total = parseFloat(amountFromViewBag);
        if (!isNaN(total)) {
            if (selectedValue === "1") {
                var count = $("#PackageBody tr").length;
                if (count > 0) {
                    $('#PackageBody').find('.total1').each(function () {
                        var price = parseFloat($(this).val());
                        if (!isNaN(price)) {
                            total += price;
                        }
                    });
                }
            }
            else if (selectedValue === "2") {
                var count = $("#Maintable tr").length;
                if (count > 0) {
                    $('#Maintable').find('.total').each(function () {
                        var price = parseFloat($(this).val());
                        if (!isNaN(price)) {
                            total += price;
                        }
                    });
                }
            }
            else {
                total = 0;
            }
            $('#txtTotal').val(total.toFixed(0));

        }
    }
    function calculateTotalPackage() {
        var total = parseFloat(amountFromViewBag);
        if (!isNaN(total)) {
            var count = $("#PackageBody tr").length;
            if (count > 0) {
                $('#PackageBody').find('.total1').each(function () {
                    var price = parseFloat($(this).val());
                    if (!isNaN(price)) {
                        total += price;
                    }
                });
            }
            var count = $("#MainTable tr").length;
            if (count > 0) {
                $('#MainTable').find('.total').each(function () {
                    var price = parseFloat($(this).val());
                    if (!isNaN(price)) {
                        total += price;
                    }
                });
            }
            $('#txtTotal').val(total.toFixed(0));
        }
    }
    function calculateTotalIndividual() {
        var total = parseFloat(amountFromViewBag);
        if (!isNaN(total)) {
            var count = $("#MainTable tr").length;
            if (count > 0) {
                $('#MainTable').find('.total').each(function () {
                    var price = parseFloat($(this).val());
                    if (!isNaN(price)) {
                        total += price;
                    }
                });
            }
            $('#txtTotal').val(total.toFixed(0));
        }
    }

    function GetRowSubCategoryId(_SubCategoryId, _RowCount)
    {
            if (_SubCategoryId === "")
            {
                var rowcount1 = _RowCount;
                var RowNew = '.newRow' + rowcount1;
                $(RowNew).each(function () {
                    var $row = $(this).closest("tr");
                    if (_SubCategoryId === "") {
                        $row.find("input[name='Price']").val(0);
                        $row.find("input[name='NoOfSitting']").val('');
                        $row.find("input[name='DayInterval']").val('');
                        calculateTotal();
                    }
                });
            return;
        }

        var url = "@System.Configuration.ConfigurationManager.AppSettings["notifyKey"]" + "/BookingManagement/SelectSubCategoryDetails";
        $.ajax({
            url: url,
            data: { Subcateid: _SubCategoryId },
            cache: false,
            type: "POST",
            dataType: "json",
            traditional: true,
            success: function (data)
            {
                var rowcount1 = _RowCount;
                var RowNew = '.newRow' + rowcount1;

                $(RowNew).each(function ()
                {
                    var $row = $(this).closest("tr");
                    for (var i = 0; i < data.SubCateGory.length; i++)
                    {
                        var selectedPrice = data.SubCateGory[i].Amount;
                        var selectedSubcategory = data.SubCateGory[i].SubCategoryName;
                        var NoOfSitting = data.SubCateGory[i].NoOfSitting;
                        var Intervals = data.SubCateGory[i].DayInterval;
                        $row.find("input[name='Price']").val(selectedPrice);
                        $row.find("input[name='NoOfSitting']").val(NoOfSitting);
                        $row.find("input[name='DayInterval']").val(Intervals);
                        $row.find("input[name='IntePackageServiceId']").val(0);
                        $row.find("select[name='SubCategoryId'] option:selected").text(selectedSubcategory);
                        calculateTotal();
                    }
                });
            },
            error: function (reponse)
            {
                var rowcount1 = _RowCount;
                var $row = $(this).closest("tr");
                $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="">Service Not Found</option>');
            },
        });
    }

    function getRowJson(button) {
        var $row = $(button).closest("tr");
        var rowData =
        {
            CategoryId: $row.find("input[name='CategoryId']").val(),
            SubCategoryId: $row.find("input[name='SubCategoryId']").val(),
            Price: $row.find("input[name='Price']").val(),
            AppointmentDateTime: $row.find("input[name='AppointmentDateTime']").val()
        };

        var SubCategoryDropdown = $row.find("select[name='SubCategoryId']");
        var CategoryDropdown = $row.find("select[name='CategoryId']")
        if (SubCategoryDropdown.length) {
            rowData.SubCategoryId = SubCategoryDropdown.val();
        }
        if (CategoryDropdown.length) {
            rowData.CategoryId = CategoryDropdown.val();
        }

        for (var key in rowData) {
           // comment a if condition on 09-08-2023 if (rowData.hasOwnProperty(key) && (rowData[key] === undefined || rowData[key] === ''))
                if (rowData.hasOwnProperty(key)) {
                $row.remove();
                return null;
            }
        }
        return rowData;
    }

    function GetSelectedSubCategory(_Category) {
        if (_Category == "") {
            _Category = 0;
        }
        if (_Category != 0 ) {
            var url = "@System.Configuration.ConfigurationManager.AppSettings["myKey"]" + "/BookingManagement/SelectSubCategoryJson";

            $.ajax({
                url: url,
                data: { ddlCategoryDropdown: _Category  } ,
                cache: false,
                type: "POST",
                datatype: "json",
                traditional: true,

                success: function (data) {
                    var ddlSubCategory = $("#ddlSubCategory");
                    ddlSubCategory.empty();
                    ddlSubCategory.append('<option value="">Select Services</option>');
                    for (var i = 0; i < data.SubCateGory.length; i++) {
                        ddlSubCategory.append('<option value="' + data.SubCateGory[i].SubCategoryId + '">' + data.SubCateGory[i].SubCategoryName + '</option>');
                    }
                    $('#Price').val(0);
                    $('#NoOfSitting').val('');
                    $('#DayInterval').val('');
                    $('#IntePackageServiceId').val(0);
                    calculateTotal();
                },
                error: function (reponse) {
                    var ddlSubCategory = $("#ddlSubCategory");
                    ddlSubCategory.empty();
                    ddlSubCategory.append('<option value="">Services Not Found</option>');
                }
            });
        }
        else {
            var ddlSubCategory = $("#ddlSubCategory");
            ddlSubCategory.empty();
            ddlSubCategory.append('<option value="">Services Not Found</option>');
            $('#Price').val(0);
            $('#NoOfSitting').val('');
            $('#DayInterval').val('');
            calculateTotal();
        }
    }
    function GetRowSubCategory(_Category,_RowCount) {
        if (_Category === "") {
            var rowcount1 = _RowCount;
            var RowNew = '.newRow' + rowcount1;

            $(RowNew).each(function () {
                var $row = $(this).closest("tr");
                if (_Category === "") {
                    $row.find("input[name='Price']").val(0);
                    $row.find("input[name='NoOfSitting']").val('');
                    $row.find("input[name='DayInterval']").val('');
                    var ddlSubCategory = $("#SubCategoryDropdown" + rowcount1);
                    ddlSubCategory.empty();
                    ddlSubCategory.append('<option value="">Service Not Found</option>');
                    calculateTotal();
                }
            });
            return;
        }
            var url = "@System.Configuration.ConfigurationManager.AppSettings["myKey"]" + "/BookingManagement/SelectSubCategoryJson";

            $.ajax({
                url: url,
                data: { ddlCategoryDropdown: _Category  } ,
                cache: false,
                type: "POST",
                datatype: "json",
                traditional: true,

                success: function (data) {
                    var rowcount1 = _RowCount;
                    var RowNew = '.newRow' + rowcount1;
                    $(RowNew).each(function () {
                        var $row = $(this).closest('tr');
                        $row.find("#SubCategoryDropdown" + rowcount1).empty();
                        $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="">Select Services</option>');
                        for (var i = 0; i < data.SubCateGory.length; i++) {
                            $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="' + data.SubCateGory[i].SubCategoryId + '">' + data.SubCateGory[i].SubCategoryName +
                                '</option>');
                        }
                        $row.find("input[name='Price']").val(0);
                        $row.find("input[name='NoOfSitting']").val('');
                        $row.find("input[name='DayInterval']").val('');
                        calculateTotal();
                    });
                },
                error: function (reponse) {
                    var $row = $(this).closest('tr');
                    $row.find("#SubCategoryDropdown" + rowcount1).empty();
                    $row.find("#SubCategoryDropdown" + rowcount1).append('<option value="">Service Not Found</option>');
                }
            });

    }
</script>

<script>
    function GetPackageId(_PackageId)
    {
        if (_PackageId == "") { _PackageId = 0; }
        if (_PackageId != 0) {
            var url = "@System.Configuration.ConfigurationManager.AppSettings["notifyKey"]" + "/BookingManagement/SelectPackages";
            $.ajax({
                url: url,
                data: { PackageId: _PackageId },
                cache: false,
                type: "POST",
                datatype: "json",
                traditional: true,
                success:
                    function (data)
                    {
                        var tableBody = $('#PackageBody');
                        tableBody.empty();
                        if (data.length === 0)
                        {
                            addEmptyRow();
                        }
                        else
                        {
                            CategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.CategoryList))');
                            SubCategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.SubCategoryList))');
                            var CategoryOptions = '';
                            var SubCategoryOptions = '';
                            CategoryOptions += '<option value="">Select Category</option>';
                            for (var i = 0; i < CategoryList.length; i++)
                            {
                                CategoryOptions += '<option value="' + CategoryList[i].CategoryId + '">' + CategoryList[i].CategoryName + '</option>';
                            }

                            SubCategoryOptions += '<option value="">Select SubCategory</option>';
                            for (var i = 0; i < SubCategoryList.length; i++)
                            {
                                SubCategoryOptions += '<option value="' + SubCategoryList[i].SubCategoryId + '">' + SubCategoryList[i].SubCategoryName + '</option>';
                            }

                            $.each(data.sittingList, function (index, item)
                            {
                                var contactdiv = '<tr class="data-contact-person2 newRow' + rowCount + '">' +
                                    '<td><input type="text" name="CategoryName" class="form-control" value="' + item.CategoryName + '" readonly="readonly" autocomplete="off" /><input type="text" name="CategoryId" id="CategoryDropdown" class="form-control text-center" value="' + item.CategoryId + '" hidden/> </td> ' +
                                    '<td><input type="text" name="SubCategoryName" class="form-control" value="' + item.SubCategoryName + '" readonly="readonly" autocomplete="off" /><input type="text" name="SubCategoryId" id="SubCategoryDropdown" class="form-control text-center" value="' + item.SubCategoryId + '" hidden/> </td> ' +
                                    '<td>' + '<input type="text" name="NoOfSitting" id="NoOfSitting" value="' + item.NoOfSitting + '" class="form-control" readonly = "readonly" />' + '</td>' + '<td>' + '<input type="text" name="DayInterval" id="DayInterval" value="' + item.DayInterval + '" class="form-control" readonly = "readonly" required/>' + '</td>' + '<td>' + '<input type="text" name="Remark" id="Remark" value="' + item.Remark + '" class="form-control"  /><input type="text" name="IntePackageServiceId" id="IntePackageServiceId" value="' + item.IntePackageServiceId + '" class="form-control" readonly hidden/>' + '</td>'+
                                '<td>' + '<button type="button" class="btn btn-sm btn-primary classAdd2 mx-1"><i class="fa fa-plus-square" aria-hidden="true"></i></button>' +
                                '<button type="button" style="display:none" class="btn btn-sm btn-danger deleteContact2"><i class="fa fa-trash" aria-hidden="true"></i></button>' +
                                '</td>' +
                                '</tr>';

                                $('#PackageBody').append(contactdiv);
                                individualFieldset1.style.display = "block";
                                $('.js-example-basic-single').select2();

                                rowCount++;
                            });
                            $(document).on("click", ".deleteContact2", function () {
                                var $row = $(this).closest("tr");
                                var rowJson = getRowJson(this);
                                if (!rowJson) {
                                    $row.remove();
                                    var count = $("#PackageBody tr").length;
                                    if (count > 0) {
                                        calculateTotal();
                                    }
                                    else {
                                        amountFromViewBag = 0;
                                        $('#txtTotal').val(0);
                                    }
                                    return;
                                }
                           });
                        }
                        $('#txtTotal').val(data.amount);
                        amountFromViewBag = data.amount;
                    },
                    error: function (reponse)
                    {
                        var page = "Select Service"; $('#Price').html(page);
                        individualFieldset1.style.display = "none";
                        $('#txtTotal').val(0);
                    }
            });
        }
        else
        {
            var page = "Select Service"; $('#Price').html(page);
            individualFieldset1.style.display = "none";
            $('#txtTotal').val(0);

        }
    }
</script>
<script>
    var rowCount = $('.data-contact-person2').length;

        $(document).on("click", ".classAdd2", function () {
            CategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.CategoryList))');
            SubCategoryList = JSON.parse('@Html.Raw(Json.Encode(Model.SubCategoryList))');
            var CategoryOptions = '';
            var SubCategoryOptions = '';
                    CategoryOptions += '<option value="">Select Category</option>';
                    for (var i = 0; i < CategoryList.length; i++) {
                        CategoryOptions += '<option value="' + CategoryList[i].CategoryId + '">' +
                            CategoryList[i].CategoryName +
                    '</option>';
            }
            SubCategoryOptions += '<option value="">Select SubCategory</option>';
                    for (var i = 0; i < SubCategoryList.length; i++) {
                        SubCategoryOptions += '<option value="' + SubCategoryList[i].SubCategoryId + '">' +
                            SubCategoryList[i].SubCategoryName +
                    '</option>';
            }
                    var contactdiv = '<tr class="data-contact-person newRow' + rowCount + '">' +
                        '<td>' +
                        '<select name="CategoryId" id="CategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategory(this.value,' + rowCount + ')" class="form-control form-select js-example-basic-single w-100" style="width: 200px; !important" required>' +
                        CategoryOptions +
                        '</select></td>' +
                        '<td>' +
                        '<select name="SubCategoryId" id="SubCategoryDropdown' + rowCount + '" onchange="javascript:GetRowSubCategoryId(this.value,' + rowCount + ')" class="form-control form-select js-example-basic-single w-100" style="width: 250px; !important" required>' +
                        SubCategoryOptions +
                        '</select></td>' + '<td> <input type="text" name="NoOfSitting" id="NoOfSitting' + rowCount + '" class="form-control" readonly = "readonly" required/> </td> ' + '<td> <input type="text" name="DayInterval" id="DayInterval' + rowCount + '" class="form-control" readonly = "readonly" required/></td> ' + '<td> <input type="text" name="Remark" id="Remark' + rowCount + '" class="form-control"/><input type="text" name="Price" id="Price' + rowCount + '" class="form-control total1" readonly="readonly" hidden required/><input type="text" name="IntePackageServiceId" id="IntePackageServiceId' + rowCount + '" class="form-control total1" readonly="readonly" hidden required/> </td>' +
                        '<td>' +
                        '<button type="button" class="btn btn-sm btn-primary classAdd2 mx-1"> <i class="fa fa-plus-square" aria-hidden="true"></i> </button>' +
                        '<button type="button" class="btn btn-sm btn-danger deleteContact2"><i class="fa fa-trash" aria-hidden="true"></i></button>' +
                        '</td>' +
                        '</tr>';

            $('#PackageBody').append(contactdiv);
            individualFieldset1.style.display = "block";

                    $('.js-example-basic-single').select2();
                    $(document).on("click", ".deleteContact2", function () {
                        var $row = $(this).closest("tr");
                        var rowJson = getRowJson(this);
                            if (!rowJson) {
                                $row.remove();
                                var count = $("table").find("tr").length;
                                if (count > 0) {
                                    calculateTotal();
                                }
                                else {
                                    amountFromViewBag = 0;
                                    $('#txtTotal').val(0);
                                }
                                return;
                            }


                    });
            rowCount++;

        });
</script>

<script>
    // For Store Data
    function StoreAllValues(event) {
        debugger
        var BookAppointment = [];

        var appointmentTypeDropdown = $('#AppointmentType').find(":selected").val();
        var validationFailed = false;

        if (appointmentTypeDropdown == '2') {
            var tableSelectorMain = "#Maintable";
            var rowNumber = 0;
            $(tableSelectorMain + " TBODY TR").each(function () {
                rowNumber++;
                var row = $(this);
                var MainData = {};
                var CategoryIdInput = row.find("td:eq(0) input[name='CategoryId']");
                var CategoryNameInput = row.find("td:eq(0) input[name='CategoryName']");
                var CategoryIdDropdown = row.find("td:eq(0) select[name='CategoryId']");
                var CategoryNameDropdown = row.find("td:eq(0) select[name='CategoryName']");
               
                if (CategoryIdInput.length && CategoryIdInput.val() !== "") {
                    MainData.CategoryId = CategoryIdInput.val();
                    MainData.CategoryName = CategoryNameInput.val();
                }
                else if (CategoryIdDropdown.length && CategoryIdDropdown.val() !== "") {
                    MainData.CategoryId = CategoryIdDropdown.val();
                    MainData.CategoryName = CategoryIdDropdown.find("option:selected").text();
                }
                else {
                    SweetAlert("Category is required for " + rowNumber + " Service", "error");
                    validationFailed = true; 
                    return false;  
                }
                var SubCategoryIdInput = row.find("td:eq(1) input[name='SubCategoryId']");
                var SubCategoryNameInput = row.find("td:eq(1) input[name='SubCategoryName']");
                var SubCategoryIdDropdown = row.find("td:eq(1) select[name='SubCategoryId']");
                var SubCategoryNameDropdown = row.find("td:eq(1) select[name='SubCategoryName']");
              
                if (SubCategoryIdInput.length && SubCategoryIdInput.val() !== "") {
                    MainData.SubCategoryId = SubCategoryIdInput.val();
                    MainData.SubCategoryName = SubCategoryNameInput.val();
                }
                else if (SubCategoryIdDropdown.length && SubCategoryIdDropdown.val() !== "") {
                    MainData.SubCategoryId = SubCategoryIdDropdown.val();
                    MainData.SubCategoryName = SubCategoryIdDropdown.find("option:selected").text();
                }
                else {
                    SweetAlert("Service is required for " + rowNumber + " Service", "error");
                    validationFailed = true; 
                    return false;  
                }
                MainData.NoOfSitting = row.find("td:eq(2) input[name='NoOfSitting']").val();
                if (MainData.NoOfSitting === "") {
                    SweetAlert("No Of Sitting is required for " + rowNumber + " Service", "error");
                    validationFailed = true; 
                    return false;  
                }
                MainData.DayInterval = row.find("td:eq(3) input[name='DayInterval']").val();
                if (MainData.DayInterval === "") {
                    SweetAlert("Day of Intervals is required for " + rowNumber + " Service", "error");
                    validationFailed = true;  
                    return false;  
                }
                MainData.Remark = row.find("td:eq(4) input[name='Remark']").val();
                MainData.IntePackageServiceId = row.find("td:eq(4) input[name='IntePackageServiceId']").val();
                if (MainData.IntePackageServiceId == null) {
                    MainData.IntePackageServiceId = 0;
                }
                BookAppointment.push(MainData);
            });
        }
        // for Individual
        else if (appointmentTypeDropdown == '1') {
            var tableSelectorPackage = "#PackageTable";
            var rowNumber = 0;
            $(tableSelectorPackage + " TBODY TR").each(function () {
                debugger
                rowNumber++;
                var row = $(this);
                var MainData2 = {};
                var CategoryIdInput = row.find("td:eq(0) input[name='CategoryId']");
                var CategoryNameInput = row.find("td:eq(0) input[name='CategoryName']");
                var CategoryIdDropdown = row.find("td:eq(0) select[name='CategoryId']");
                var CategoryNameDropdown = row.find("td:eq(0) select[name='CategoryName']");
                if (CategoryIdInput.length && CategoryIdInput.val() !== "") {
                    MainData2.CategoryId = CategoryIdInput.val();
                    MainData2.CategoryName = CategoryNameInput.val();
                }
                else if (CategoryIdDropdown.length && CategoryIdDropdown.val() !== "") {
                    MainData2.CategoryId = CategoryIdDropdown.val();
                    MainData2.CategoryName = CategoryIdDropdown.find("option:selected").text();
                }
                else {
                    SweetAlert("Category is required for " + rowNumber + " Service", "error");
                    validationFailed = true;  
                    return false; 
                }

                var SubCategoryIdInput = row.find("td:eq(1) input[name='SubCategoryId']");
                var SubCategoryNameInput = row.find("td:eq(1) input[name='SubCategoryName']");
                var SubCategoryIdDropdown = row.find("td:eq(1) select[name='SubCategoryId']");
                var SubCategoryNameDropdown = row.find("td:eq(1) select[name='SubCategoryName']");
                if (SubCategoryIdInput.length && SubCategoryIdInput.val() !== "") {
                    MainData2.SubCategoryId = SubCategoryIdInput.val();
                    MainData2.SubCategoryName = SubCategoryNameInput.val();
                }
                else if (SubCategoryIdDropdown.length && SubCategoryIdDropdown.val() !== "") {
                    MainData2.SubCategoryId = SubCategoryIdDropdown.val();
                    MainData2.SubCategoryName = SubCategoryIdDropdown.find("option:selected").text();
                }
                else {
                    SweetAlert("Service is required for " + rowNumber + " Service", "error");
                    validationFailed = true; 
                    return false; 
                }
                MainData2.NoOfSitting = row.find("td:eq(2) input[name='NoOfSitting']").val();
                if (MainData2.NoOfSitting === "") {
                    SweetAlert("No Of Sitting is required for " + rowNumber + " Service", "error");
                    validationFailed = true;
                    return false; 
                }
                MainData2.DayInterval = row.find("td:eq(3) input[name='DayInterval']").val();
                if (MainData2.DayInterval === "") {
                    SweetAlert("Day of Intervals is required for " + rowNumber + " Service", "error");
                    validationFailed = true; 
                    return false;
                }
                MainData2.Remark = row.find("td:eq(4) input[name='Remark']").val();
                MainData2.IntePackageServiceId = row.find("td:eq(4) input[name='IntePackageServiceId']").val();
                if (MainData2.IntePackageServiceId == null) {
                    MainData2.IntePackageServiceId = 0;
                }
                BookAppointment.push(MainData2);
            });
        }
        if (validationFailed) {
            event.preventDefault();
            return;  // Exit the function if validation failed for any row
        }
        var serializedData = JSON.stringify(BookAppointment);
        $('input[name="BookAppointment"]').val(serializedData);
        $('#myForm').submit();
    }
    function SweetAlert(Message, Type) {
        if (Type == 'error') {
            Swal.fire({
                position: 'top-end',
                icon: 'error',
                title: Message,
                showConfirmButton: false,
                timer: 3000
            })
        }
    }

</script>


